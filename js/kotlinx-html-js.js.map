{"version":3,"file":"kotlinx-html-js.js","sources":["./compatibility-js.kt","./dom-js.kt","./collections/Collections.kt","./core/generated/_CollectionsJs.kt","./core/string.kt","./util/Standard.kt","./generated/gen-consumer-tags-js.kt","./generated/gen-event-attrs-js.kt","./injector.kt","./collections/Maps.kt","./trace-js.kt","./utilsImpl-js.kt","./api.kt","./attributes.kt","./text/regex/RegexExtensions.kt","./text/Strings.kt","./compatibility.kt","./delayed-consumer.kt","./delegating-map.kt","./core/generated/_MapsJs.kt","./exception-consumer.kt","./filter-consumer.kt","./finalize-consumer.kt","./generated/gen-attr-traits.kt","./generated/gen-consumer-tags.kt","./generated/gen-entities.kt","./generated/gen-enums.kt","./generated/gen-tag-groups.kt","./generated/gen-tag-unions.kt","./generated/gen-tags-a.kt","./generated/gen-tags-b.kt","./generated/gen-tags-c.kt","./generated/gen-tags-d.kt","./generated/gen-tags-e.kt","./generated/gen-tags-f.kt","./generated/gen-tags-h.kt","./generated/gen-tags-i.kt","./generated/gen-tags-k.kt","./generated/gen-tags-l.kt","./generated/gen-tags-m.kt","./generated/gen-tags-n.kt","./generated/gen-tags-o.kt","./generated/gen-tags-p.kt","./generated/gen-tags-q.kt","./generated/gen-tags-r.kt","./generated/gen-tags-s.kt","./generated/gen-tags-t.kt","./generated/gen-tags-u.kt","./generated/gen-tags-v.kt","./htmltag.kt","./measure-consumer.kt","./stream.kt","./arrayUtils.kt","./core/generated/_StringsJs.kt","./trace-consumer.kt","./util.kt","./generated/gen-attributes.kt","./core/generated/_ArraysJs.kt"],"sourcesContent":["package kotlinx.html.js\n\nimport kotlinx.html.*\nimport org.w3c.dom.*\n\n@Deprecated(\"Use legend instead\", ReplaceWith(\"legend(classes, block)\"))\nfun TagConsumer<HTMLElement>.legEnd(classes : String? = null, block : LEGEND.() -> Unit = {}) : HTMLLegendElement = legend(classes, block)\n\n@Deprecated(\"Use htmlObject instead\", ReplaceWith(\"htmlObject(classes, block)\", \"kotlinx.html.js.htmlObject\"))\nfun TagConsumer<HTMLElement>.object_(classes : String? = null, block : OBJECT.() -> Unit = {}) : HTMLElement =\n        htmlObject(classes, block)\n\n@Deprecated(\"Use htmlVar instead\", ReplaceWith(\"htmlVar(classes, block)\", \"kotlinx.html.js.htmlVar\"))\nfun TagConsumer<HTMLElement>.var_(classes : String? = null, block : VAR.() -> Unit = {}) : HTMLElement =\n        htmlVar(classes, block)","package kotlinx.html.dom\n\nimport kotlinx.html.*\nimport kotlinx.html.consumers.*\nimport org.w3c.dom.*\nimport org.w3c.dom.events.*\nimport kotlin.dom.*\n\n@Suppress(\"NOTHING_TO_INLINE\")\nprivate inline fun HTMLElement.setEvent(name: String, noinline callback : (Event) -> Unit) : Unit {\n    asDynamic()[name] = callback\n}\n\nclass JSDOMBuilder<out R : HTMLElement>(val document : Document) : TagConsumer<R> {\n    private val path = arrayListOf<HTMLElement>()\n    private var lastLeaved : HTMLElement? = null\n\n    override fun onTagStart(tag: Tag) {\n        val element: HTMLElement = when {\n            tag.namespace != null -> document.createElementNS(tag.namespace!!, tag.tagName).asDynamic()\n            else -> document.createElement(tag.tagName) as HTMLElement\n        }\n\n        tag.attributesEntries.forEach {\n            element.setAttribute(it.key, it.value)\n        }\n\n        if (path.isNotEmpty()) {\n            path.last().appendChild(element)\n        }\n\n        path.add(element)\n    }\n\n    override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\n        when {\n            path.isEmpty() -> throw IllegalStateException(\"No current tag\")\n            path.last().tagName.toLowerCase() != tag.tagName.toLowerCase() -> throw IllegalStateException(\"Wrong current tag\")\n            else -> path.last().let { node ->\n                if (value == null) {\n                    node.removeAttribute(attribute)\n                } else {\n                    node.setAttribute(attribute, value)\n                }\n            }\n        }\n    }\n\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n        when {\n            path.isEmpty() -> throw IllegalStateException(\"No current tag\")\n            path.last().tagName.toLowerCase() != tag.tagName.toLowerCase() -> throw IllegalStateException(\"Wrong current tag\")\n            else -> path.last().setEvent(event, value)\n        }\n    }\n\n    override fun onTagEnd(tag: Tag) {\n        if (path.isEmpty() || path.last().tagName.toLowerCase() != tag.tagName.toLowerCase()) {\n            throw IllegalStateException(\"We haven't entered tag ${tag.tagName} but trying to leave\")\n        }\n\n        lastLeaved = path.removeAt(path.lastIndex)\n    }\n\n    override fun onTagContent(content: CharSequence) {\n        if (path.isEmpty()) {\n            throw IllegalStateException(\"No current DOM node\")\n        }\n\n        path.last().appendChild(document.createTextNode(content.toString()))\n    }\n\n    override fun onTagContentEntity(entity: Entities) {\n        if (path.isEmpty()) {\n            throw IllegalStateException(\"No current DOM node\")\n        }\n\n        // stupid hack as browsers doesn't support createEntityReference\n        val s = document.createElement(\"span\") as HTMLElement\n        s.innerHTML = entity.text\n        path.last().appendChild(s.childNodes.asList().filter { it.nodeType == Node.TEXT_NODE }.first())\n\n        // other solution would be\n//        pathLast().innerHTML += entity.text\n    }\n\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n        with(DefaultUnsafe()) {\n            block()\n\n            path.last().innerHTML += toString()\n        }\n    }\n\n    override fun finalize(): R = lastLeaved?.asR() ?: throw IllegalStateException(\"We can't finalize as there was no tags\")\n\n    @Suppress(\"UNCHECKED_CAST\")\n    private fun HTMLElement.asR(): R = this.asDynamic()\n\n}\n\n\n fun Document.createTree() : TagConsumer<HTMLElement> = JSDOMBuilder(this)\n val Document.create : TagConsumer<HTMLElement>\n    get() = JSDOMBuilder(this)\n\nfun Node.append(block : TagConsumer<HTMLElement>.() -> Unit) : List<HTMLElement> =\n        ArrayList<HTMLElement>().let { result ->\n            ownerDocumentExt.createTree().onFinalize { it, partial -> if (!partial) {result.add(it); appendChild(it) } }.block()\n\n            result\n        }\n\nval HTMLElement.append : TagConsumer<HTMLElement>\n    get() = ownerDocumentExt.createTree().onFinalize { element, partial -> if (!partial) { this@append.appendChild(element) } }\n\nprivate val Node.ownerDocumentExt: Document\n    get() = when {\n        this is Document -> this\n        else -> ownerDocument ?: throw IllegalStateException(\"Node has no ownerDocument\")\n    }\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.comparisons.compareValues\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean): Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/** Returns an empty read-only list.  The returned list is serializable (JVM). */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/** Returns a new read-only list of given elements.  The returned list is serializable (JVM). */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/** Returns an empty read-only list.  The returned list is serializable (JVM). */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n/** Returns an empty new [MutableList]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/** Returns an empty new [ArrayList]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/** Returns a new [MutableList] with the given elements. */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/** Returns a new [ArrayList] with the given elements. */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T>\n        = if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/** Returns a new read-only list either of single given element, if it is not null, or empty list it the element is null. The returned list is serializable (JVM). */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/** Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM). */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/** Returns `true` if the collection is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/** Returns this Collection if it's not `null` and the empty list otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/** Returns this List if it's not `null` and the empty list otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic fun <T: Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(key: K?, fromIndex: Int = 0, toIndex: Int = size, crossinline selector: (T) -> K?): Int =\n        binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n..size - 1)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n .. size - 1)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic fun <T> MutableList<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) count++\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n@kotlin.internal.InlineOnly\npublic inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@Deprecated(\"Use length property instead.\", ReplaceWith(\"length\"), level = DeprecationLevel.WARNING) // TODO: ERROR in 1.2\n@kotlin.internal.InlineOnly\npublic inline val CharSequence.size: Int get() = length\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R = block()\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R = block()\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R = receiver.block()\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T { block(); return this }\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T { block(this); return this }\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R = block(this)\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? = if (predicate(this)) this else null\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? = if (!predicate(this)) this else null\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","package kotlinx.html.js\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\nimport org.w3c.dom.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\npublic fun TagConsumer<HTMLElement>.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit = {}) : HTMLAnchorElement = A(attributesMapOf(\"href\", href,\"target\", target,\"class\", classes), this).visitAndFinalize(this, block) as HTMLAnchorElement\n\npublic fun TagConsumer<HTMLElement>.abbr(classes : String? = null, block : ABBR.() -> Unit = {}) : HTMLElement = ABBR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.address(classes : String? = null, block : ADDRESS.() -> Unit = {}) : HTMLElement = ADDRESS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : HTMLAreaElement = AREA(attributesMapOf(\"Shape\", shape?.enumEncode(),\"alt\", alt,\"class\", classes), this).visitAndFinalize(this, block) as HTMLAreaElement\n\npublic fun TagConsumer<HTMLElement>.article(classes : String? = null, block : ARTICLE.() -> Unit = {}) : HTMLElement = ARTICLE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.aside(classes : String? = null, block : ASIDE.() -> Unit = {}) : HTMLElement = ASIDE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.audio(classes : String? = null, block : AUDIO.() -> Unit = {}) : HTMLAudioElement = AUDIO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLAudioElement\n\npublic fun TagConsumer<HTMLElement>.b(classes : String? = null, block : B.() -> Unit = {}) : HTMLElement = B(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.base(classes : String? = null, block : BASE.() -> Unit = {}) : HTMLBaseElement = BASE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLBaseElement\n\npublic fun TagConsumer<HTMLElement>.bdi(classes : String? = null, block : BDI.() -> Unit = {}) : HTMLElement = BDI(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.bdo(classes : String? = null, block : BDO.() -> Unit = {}) : HTMLElement = BDO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.blockQuote(classes : String? = null, block : BLOCKQUOTE.() -> Unit = {}) : HTMLElement = BLOCKQUOTE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.body(classes : String? = null, block : BODY.() -> Unit = {}) : HTMLBodyElement = BODY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLBodyElement\n\npublic fun TagConsumer<HTMLElement>.br(classes : String? = null, block : BR.() -> Unit = {}) : HTMLBRElement = BR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLBRElement\n\npublic fun TagConsumer<HTMLElement>.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : HTMLButtonElement = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"type\", type?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block) as HTMLButtonElement\n\npublic fun TagConsumer<HTMLElement>.canvas(classes : String? = null, content : String = \"\") : HTMLCanvasElement = CANVAS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content}) as HTMLCanvasElement\npublic fun TagConsumer<HTMLElement>.canvas(classes : String? = null, block : CANVAS.() -> Unit = {}) : HTMLCanvasElement = CANVAS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLCanvasElement\n\npublic fun TagConsumer<HTMLElement>.caption(classes : String? = null, block : CAPTION.() -> Unit = {}) : HTMLElement = CAPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.cite(classes : String? = null, block : CITE.() -> Unit = {}) : HTMLElement = CITE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.code(classes : String? = null, block : CODE.() -> Unit = {}) : HTMLElement = CODE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.col(classes : String? = null, block : COL.() -> Unit = {}) : HTMLTableColElement = COL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableColElement\n\npublic fun TagConsumer<HTMLElement>.colGroup(classes : String? = null, block : COLGROUP.() -> Unit = {}) : HTMLTableColElement = COLGROUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableColElement\n\npublic fun TagConsumer<HTMLElement>.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit = {}) : HTMLElement = COMMAND(attributesMapOf(\"type\", type?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.dataList(classes : String? = null, block : DATALIST.() -> Unit = {}) : HTMLDataListElement = DATALIST(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLDataListElement\n\npublic fun TagConsumer<HTMLElement>.dd(classes : String? = null, block : DD.() -> Unit = {}) : HTMLElement = DD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.del(classes : String? = null, block : DEL.() -> Unit = {}) : HTMLElement = DEL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.details(classes : String? = null, block : DETAILS.() -> Unit = {}) : HTMLDetailsElement = DETAILS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLDetailsElement\n\npublic fun TagConsumer<HTMLElement>.dfn(classes : String? = null, block : DFN.() -> Unit = {}) : HTMLElement = DFN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.dialog(classes : String? = null, block : DIALOG.() -> Unit = {}) : HTMLDialogElement = DIALOG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLDialogElement\n\npublic fun TagConsumer<HTMLElement>.div(classes : String? = null, block : DIV.() -> Unit = {}) : HTMLDivElement = DIV(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLDivElement\n\npublic fun TagConsumer<HTMLElement>.dl(classes : String? = null, block : DL.() -> Unit = {}) : HTMLElement = DL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.dt(classes : String? = null, block : DT.() -> Unit = {}) : HTMLElement = DT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.em(classes : String? = null, block : EM.() -> Unit = {}) : HTMLElement = EM(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.embed(classes : String? = null, block : EMBED.() -> Unit = {}) : HTMLEmbedElement = EMBED(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLEmbedElement\n\npublic fun TagConsumer<HTMLElement>.fieldSet(classes : String? = null, block : FIELDSET.() -> Unit = {}) : HTMLFieldSetElement = FIELDSET(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLFieldSetElement\n\npublic fun TagConsumer<HTMLElement>.figcaption(classes : String? = null, block : FIGCAPTION.() -> Unit = {}) : HTMLElement = FIGCAPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.figure(classes : String? = null, block : FIGURE.() -> Unit = {}) : HTMLElement = FIGURE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.footer(classes : String? = null, block : FOOTER.() -> Unit = {}) : HTMLElement = FOOTER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, block : FORM.() -> Unit = {}) : HTMLFormElement = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", method?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block) as HTMLFormElement\n\npublic fun TagConsumer<HTMLElement>.h1(classes : String? = null, block : H1.() -> Unit = {}) : HTMLHeadingElement = H1(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\n\npublic fun TagConsumer<HTMLElement>.h2(classes : String? = null, block : H2.() -> Unit = {}) : HTMLHeadingElement = H2(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\n\npublic fun TagConsumer<HTMLElement>.h3(classes : String? = null, block : H3.() -> Unit = {}) : HTMLHeadingElement = H3(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\n\npublic fun TagConsumer<HTMLElement>.h4(classes : String? = null, block : H4.() -> Unit = {}) : HTMLHeadingElement = H4(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\n\npublic fun TagConsumer<HTMLElement>.h5(classes : String? = null, block : H5.() -> Unit = {}) : HTMLHeadingElement = H5(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\n\npublic fun TagConsumer<HTMLElement>.h6(classes : String? = null, block : H6.() -> Unit = {}) : HTMLHeadingElement = H6(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHeadingElement\n\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\npublic fun TagConsumer<HTMLElement>.head(content : String = \"\") : HTMLHeadElement = HEAD(emptyMap, this).visitAndFinalize(this, {+content}) as HTMLHeadElement\npublic fun TagConsumer<HTMLElement>.head(block : HEAD.() -> Unit = {}) : HTMLHeadElement = HEAD(emptyMap, this).visitAndFinalize(this, block) as HTMLHeadElement\n\npublic fun TagConsumer<HTMLElement>.header(classes : String? = null, block : HEADER.() -> Unit = {}) : HTMLElement = HEADER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.hGroup(classes : String? = null, block : HGROUP.() -> Unit = {}) : HTMLElement = HGROUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.hr(classes : String? = null, block : HR.() -> Unit = {}) : HTMLHRElement = HR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLHRElement\n\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\npublic fun TagConsumer<HTMLElement>.html(content : String = \"\") : HTMLHtmlElement = HTML(emptyMap, this).visitAndFinalize(this, {+content}) as HTMLHtmlElement\npublic fun TagConsumer<HTMLElement>.html(block : HTML.() -> Unit = {}) : HTMLHtmlElement = HTML(emptyMap, this).visitAndFinalize(this, block) as HTMLHtmlElement\n\npublic fun TagConsumer<HTMLElement>.i(classes : String? = null, block : I.() -> Unit = {}) : HTMLElement = I(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = \"\") : HTMLElement = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, {+content})\npublic fun TagConsumer<HTMLElement>.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit = {}) : HTMLElement = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit = {}) : HTMLImageElement = IMG(attributesMapOf(\"alt\", alt,\"src\", src,\"class\", classes), this).visitAndFinalize(this, block) as HTMLImageElement\n\npublic fun TagConsumer<HTMLElement>.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : HTMLInputElement = INPUT(attributesMapOf(\"type\", type?.enumEncode(),\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), this).visitAndFinalize(this, block) as HTMLInputElement\n\npublic fun TagConsumer<HTMLElement>.ins(classes : String? = null, block : INS.() -> Unit = {}) : HTMLElement = INS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.kbd(classes : String? = null, block : KBD.() -> Unit = {}) : HTMLElement = KBD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit = {}) : HTMLElement = KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.label(classes : String? = null, block : LABEL.() -> Unit = {}) : HTMLLabelElement = LABEL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLLabelElement\n\npublic fun TagConsumer<HTMLElement>.legend(classes : String? = null, block : LEGEND.() -> Unit = {}) : HTMLLegendElement = LEGEND(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLLegendElement\n\npublic fun TagConsumer<HTMLElement>.li(classes : String? = null, block : LI.() -> Unit = {}) : HTMLLIElement = LI(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLLIElement\n\npublic fun TagConsumer<HTMLElement>.link(href : String? = null, rel : String? = null, type : String? = null, block : LINK.() -> Unit = {}) : HTMLLinkElement = LINK(attributesMapOf(\"href\", href,\"rel\", rel,\"type\", type), this).visitAndFinalize(this, block) as HTMLLinkElement\n\npublic fun TagConsumer<HTMLElement>.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit = {}) : HTMLMapElement = MAP(attributesMapOf(\"name\", name,\"class\", classes), this).visitAndFinalize(this, block) as HTMLMapElement\n\npublic fun TagConsumer<HTMLElement>.mark(classes : String? = null, block : MARK.() -> Unit = {}) : HTMLElement = MARK(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.math(classes : String? = null, block : MATH.() -> Unit = {}) : HTMLElement = MATH(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.mathml(classes : String? = null, content : String = \"\") : HTMLElement = MATHML(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\npublic fun TagConsumer<HTMLElement>.mathml(classes : String? = null, block : MATHML.() -> Unit = {}) : HTMLElement = MATHML(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.meta(name : String? = null, content : String? = null, charset : String? = null, block : META.() -> Unit = {}) : HTMLMetaElement = META(attributesMapOf(\"name\", name,\"content\", content,\"charset\", charset), this).visitAndFinalize(this, block) as HTMLMetaElement\n\npublic fun TagConsumer<HTMLElement>.meter(classes : String? = null, block : METER.() -> Unit = {}) : HTMLMeterElement = METER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLMeterElement\n\npublic fun TagConsumer<HTMLElement>.nav(classes : String? = null, block : NAV.() -> Unit = {}) : HTMLElement = NAV(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit = {}) : HTMLElement = NOSCRIPT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.htmlObject(classes : String? = null, block : OBJECT.() -> Unit = {}) : HTMLElement = OBJECT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.ol(classes : String? = null, block : OL.() -> Unit = {}) : HTMLElement = OL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.optGroup(label : String? = null, classes : String? = null, block : OPTGROUP.() -> Unit = {}) : HTMLOptGroupElement = OPTGROUP(attributesMapOf(\"label\", label,\"class\", classes), this).visitAndFinalize(this, block) as HTMLOptGroupElement\n\npublic fun TagConsumer<HTMLElement>.option(classes : String? = null, content : String = \"\") : HTMLOptionElement = OPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content}) as HTMLOptionElement\npublic fun TagConsumer<HTMLElement>.option(classes : String? = null, block : OPTION.() -> Unit = {}) : HTMLOptionElement = OPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLOptionElement\n\npublic fun TagConsumer<HTMLElement>.output(classes : String? = null, block : OUTPUT.() -> Unit = {}) : HTMLOutputElement = OUTPUT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLOutputElement\n\npublic fun TagConsumer<HTMLElement>.p(classes : String? = null, block : P.() -> Unit = {}) : HTMLParagraphElement = P(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLParagraphElement\n\npublic fun TagConsumer<HTMLElement>.param(name : String? = null, value : String? = null, block : PARAM.() -> Unit = {}) : HTMLParamElement = PARAM(attributesMapOf(\"name\", name,\"value\", value), this).visitAndFinalize(this, block) as HTMLParamElement\n\npublic fun TagConsumer<HTMLElement>.pre(classes : String? = null, block : PRE.() -> Unit = {}) : HTMLPreElement = PRE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLPreElement\n\npublic fun TagConsumer<HTMLElement>.progress(classes : String? = null, block : PROGRESS.() -> Unit = {}) : HTMLProgressElement = PROGRESS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLProgressElement\n\npublic fun TagConsumer<HTMLElement>.q(classes : String? = null, block : Q.() -> Unit = {}) : HTMLElement = Q(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.rp(classes : String? = null, block : RP.() -> Unit = {}) : HTMLElement = RP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.rt(classes : String? = null, block : RT.() -> Unit = {}) : HTMLElement = RT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.ruby(classes : String? = null, block : RUBY.() -> Unit = {}) : HTMLElement = RUBY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.samp(classes : String? = null, block : SAMP.() -> Unit = {}) : HTMLElement = SAMP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\npublic fun TagConsumer<HTMLElement>.script(type : String? = null, src : String? = null, content : String = \"\") : HTMLScriptElement = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), this).visitAndFinalize(this, {+content}) as HTMLScriptElement\npublic fun TagConsumer<HTMLElement>.script(type : String? = null, src : String? = null, block : SCRIPT.() -> Unit = {}) : HTMLScriptElement = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), this).visitAndFinalize(this, block) as HTMLScriptElement\n\npublic fun TagConsumer<HTMLElement>.section(classes : String? = null, block : SECTION.() -> Unit = {}) : HTMLElement = SECTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.select(classes : String? = null, block : SELECT.() -> Unit = {}) : HTMLSelectElement = SELECT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLSelectElement\n\npublic fun TagConsumer<HTMLElement>.small(classes : String? = null, block : SMALL.() -> Unit = {}) : HTMLElement = SMALL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.source(classes : String? = null, block : SOURCE.() -> Unit = {}) : HTMLSourceElement = SOURCE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLSourceElement\n\npublic fun TagConsumer<HTMLElement>.span(classes : String? = null, block : SPAN.() -> Unit = {}) : HTMLSpanElement = SPAN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLSpanElement\n\npublic fun TagConsumer<HTMLElement>.strong(classes : String? = null, block : STRONG.() -> Unit = {}) : HTMLElement = STRONG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\npublic fun TagConsumer<HTMLElement>.style(type : String? = null, content : String = \"\") : HTMLStyleElement = STYLE(attributesMapOf(\"type\", type), this).visitAndFinalize(this, {+content}) as HTMLStyleElement\npublic fun TagConsumer<HTMLElement>.style(type : String? = null, block : STYLE.() -> Unit = {}) : HTMLStyleElement = STYLE(attributesMapOf(\"type\", type), this).visitAndFinalize(this, block) as HTMLStyleElement\n\npublic fun TagConsumer<HTMLElement>.sub(classes : String? = null, block : SUB.() -> Unit = {}) : HTMLElement = SUB(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.sup(classes : String? = null, block : SUP.() -> Unit = {}) : HTMLElement = SUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.svg(classes : String? = null, content : String = \"\") : HTMLElement = SVG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\npublic fun TagConsumer<HTMLElement>.svg(classes : String? = null, block : SVG.() -> Unit = {}) : HTMLElement = SVG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.table(classes : String? = null, block : TABLE.() -> Unit = {}) : HTMLTableElement = TABLE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableElement\n\npublic fun TagConsumer<HTMLElement>.tbody(classes : String? = null, block : TBODY.() -> Unit = {}) : HTMLTableSectionElement = TBODY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableSectionElement\n\npublic fun TagConsumer<HTMLElement>.td(classes : String? = null, block : TD.() -> Unit = {}) : HTMLTableCellElement = TD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableCellElement\n\npublic fun TagConsumer<HTMLElement>.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = \"\") : HTMLTextAreaElement = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, {+content}) as HTMLTextAreaElement\npublic fun TagConsumer<HTMLElement>.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : HTMLTextAreaElement = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block) as HTMLTextAreaElement\n\npublic fun TagConsumer<HTMLElement>.tfoot(classes : String? = null, block : TFOOT.() -> Unit = {}) : HTMLTableSectionElement = TFOOT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableSectionElement\n\npublic fun TagConsumer<HTMLElement>.th(scope : ThScope? = null, classes : String? = null, block : TH.() -> Unit = {}) : HTMLTableCellElement = TH(attributesMapOf(\"scope\", scope?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableCellElement\n\npublic fun TagConsumer<HTMLElement>.thead(classes : String? = null, block : THEAD.() -> Unit = {}) : HTMLTableSectionElement = THEAD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableSectionElement\n\npublic fun TagConsumer<HTMLElement>.time(classes : String? = null, block : TIME.() -> Unit = {}) : HTMLTimeElement = TIME(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTimeElement\n\npublic fun TagConsumer<HTMLElement>.title(content : String = \"\") : HTMLTitleElement = TITLE(emptyMap, this).visitAndFinalize(this, {+content}) as HTMLTitleElement\npublic fun TagConsumer<HTMLElement>.title(block : TITLE.() -> Unit = {}) : HTMLTitleElement = TITLE(emptyMap, this).visitAndFinalize(this, block) as HTMLTitleElement\n\npublic fun TagConsumer<HTMLElement>.tr(classes : String? = null, block : TR.() -> Unit = {}) : HTMLTableRowElement = TR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLTableRowElement\n\npublic fun TagConsumer<HTMLElement>.ul(classes : String? = null, block : UL.() -> Unit = {}) : HTMLElement = UL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.htmlVar(classes : String? = null, block : VAR.() -> Unit = {}) : HTMLElement = VAR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\npublic fun TagConsumer<HTMLElement>.video(classes : String? = null, block : VIDEO.() -> Unit = {}) : HTMLVideoElement = VIDEO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block) as HTMLVideoElement\n\n","package kotlinx.html.js\n\nimport kotlinx.html.*\nimport kotlinx.html.attributes.*\nimport kotlinx.html.dom.*\nimport org.w3c.dom.events.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\nvar CommonAttributeGroupFacade.onAbortFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onAbort\")\n    set(newValue) {consumer.onTagEvent(this, \"onabort\", newValue)}\n\nvar CommonAttributeGroupFacade.onBlurFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onBlur\")\n    set(newValue) {consumer.onTagEvent(this, \"onblur\", newValue)}\n\nvar CommonAttributeGroupFacade.onCanPlayFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onCanPlay\")\n    set(newValue) {consumer.onTagEvent(this, \"oncanplay\", newValue)}\n\nvar CommonAttributeGroupFacade.onCanPlayThroughFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onCanPlayThrough\")\n    set(newValue) {consumer.onTagEvent(this, \"oncanplaythrough\", newValue)}\n\nvar CommonAttributeGroupFacade.onChangeFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onChange\")\n    set(newValue) {consumer.onTagEvent(this, \"onchange\", newValue)}\n\nvar CommonAttributeGroupFacade.onClickFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onClick\")\n    set(newValue) {consumer.onTagEvent(this, \"onclick\", newValue)}\n\nvar CommonAttributeGroupFacade.onContextMenuFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onContextMenu\")\n    set(newValue) {consumer.onTagEvent(this, \"oncontextmenu\", newValue)}\n\nvar CommonAttributeGroupFacade.onDoubleClickFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDoubleClick\")\n    set(newValue) {consumer.onTagEvent(this, \"ondblclick\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDrag\")\n    set(newValue) {consumer.onTagEvent(this, \"ondrag\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragEndFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragEnd\")\n    set(newValue) {consumer.onTagEvent(this, \"ondragend\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragEnterFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragEnter\")\n    set(newValue) {consumer.onTagEvent(this, \"ondragenter\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragLeaveFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragLeave\")\n    set(newValue) {consumer.onTagEvent(this, \"ondragleave\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragOverFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragOver\")\n    set(newValue) {consumer.onTagEvent(this, \"ondragover\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragStartFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDragStart\")\n    set(newValue) {consumer.onTagEvent(this, \"ondragstart\", newValue)}\n\nvar CommonAttributeGroupFacade.onDropFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDrop\")\n    set(newValue) {consumer.onTagEvent(this, \"ondrop\", newValue)}\n\nvar CommonAttributeGroupFacade.onDurationChangeFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onDurationChange\")\n    set(newValue) {consumer.onTagEvent(this, \"ondurationchange\", newValue)}\n\nvar CommonAttributeGroupFacade.onEmptiedFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onEmptied\")\n    set(newValue) {consumer.onTagEvent(this, \"onemptied\", newValue)}\n\nvar CommonAttributeGroupFacade.onEndedFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onEnded\")\n    set(newValue) {consumer.onTagEvent(this, \"onended\", newValue)}\n\nvar CommonAttributeGroupFacade.onErrorFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onError\")\n    set(newValue) {consumer.onTagEvent(this, \"onerror\", newValue)}\n\nvar CommonAttributeGroupFacade.onFocusFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onFocus\")\n    set(newValue) {consumer.onTagEvent(this, \"onfocus\", newValue)}\n\nvar CommonAttributeGroupFacade.onFormChangeFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onFormChange\")\n    set(newValue) {consumer.onTagEvent(this, \"onformchange\", newValue)}\n\nvar CommonAttributeGroupFacade.onFormInputFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onFormInput\")\n    set(newValue) {consumer.onTagEvent(this, \"onforminput\", newValue)}\n\nvar CommonAttributeGroupFacade.onInputFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onInput\")\n    set(newValue) {consumer.onTagEvent(this, \"oninput\", newValue)}\n\nvar CommonAttributeGroupFacade.onInvalidFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onInvalid\")\n    set(newValue) {consumer.onTagEvent(this, \"oninvalid\", newValue)}\n\nvar CommonAttributeGroupFacade.onKeyDownFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onKeyDown\")\n    set(newValue) {consumer.onTagEvent(this, \"onkeydown\", newValue)}\n\nvar CommonAttributeGroupFacade.onKeyPressFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onKeyPress\")\n    set(newValue) {consumer.onTagEvent(this, \"onkeypress\", newValue)}\n\nvar CommonAttributeGroupFacade.onKeyUpFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onKeyUp\")\n    set(newValue) {consumer.onTagEvent(this, \"onkeyup\", newValue)}\n\nvar CommonAttributeGroupFacade.onLoadFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onLoad\")\n    set(newValue) {consumer.onTagEvent(this, \"onload\", newValue)}\n\nvar CommonAttributeGroupFacade.onLoadedDataFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onLoadedData\")\n    set(newValue) {consumer.onTagEvent(this, \"onloadeddata\", newValue)}\n\nvar CommonAttributeGroupFacade.onLoadedMetaDataFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onLoadedMetaData\")\n    set(newValue) {consumer.onTagEvent(this, \"onloadedmetadata\", newValue)}\n\nvar CommonAttributeGroupFacade.onLoadStartFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onLoadStart\")\n    set(newValue) {consumer.onTagEvent(this, \"onloadstart\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseDownFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseDown\")\n    set(newValue) {consumer.onTagEvent(this, \"onmousedown\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseMoveFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseMove\")\n    set(newValue) {consumer.onTagEvent(this, \"onmousemove\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseOutFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseOut\")\n    set(newValue) {consumer.onTagEvent(this, \"onmouseout\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseOverFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseOver\")\n    set(newValue) {consumer.onTagEvent(this, \"onmouseover\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseUpFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseUp\")\n    set(newValue) {consumer.onTagEvent(this, \"onmouseup\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseWheelFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onMouseWheel\")\n    set(newValue) {consumer.onTagEvent(this, \"onmousewheel\", newValue)}\n\nvar CommonAttributeGroupFacade.onPauseFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onPause\")\n    set(newValue) {consumer.onTagEvent(this, \"onpause\", newValue)}\n\nvar CommonAttributeGroupFacade.onPlayFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onPlay\")\n    set(newValue) {consumer.onTagEvent(this, \"onplay\", newValue)}\n\nvar CommonAttributeGroupFacade.onPlayingFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onPlaying\")\n    set(newValue) {consumer.onTagEvent(this, \"onplaying\", newValue)}\n\nvar CommonAttributeGroupFacade.onProgressFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onProgress\")\n    set(newValue) {consumer.onTagEvent(this, \"onprogress\", newValue)}\n\nvar CommonAttributeGroupFacade.onRateChangeFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onRateChange\")\n    set(newValue) {consumer.onTagEvent(this, \"onratechange\", newValue)}\n\nvar CommonAttributeGroupFacade.onReadyStateChangeFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onReadyStateChange\")\n    set(newValue) {consumer.onTagEvent(this, \"onreadystatechange\", newValue)}\n\nvar CommonAttributeGroupFacade.onScrollFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onScroll\")\n    set(newValue) {consumer.onTagEvent(this, \"onscroll\", newValue)}\n\nvar CommonAttributeGroupFacade.onSearchFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSearch\")\n    set(newValue) {consumer.onTagEvent(this, \"onsearch\", newValue)}\n\nvar CommonAttributeGroupFacade.onSeekedFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSeeked\")\n    set(newValue) {consumer.onTagEvent(this, \"onseeked\", newValue)}\n\nvar CommonAttributeGroupFacade.onSeekingFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSeeking\")\n    set(newValue) {consumer.onTagEvent(this, \"onseeking\", newValue)}\n\nvar CommonAttributeGroupFacade.onSelectFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSelect\")\n    set(newValue) {consumer.onTagEvent(this, \"onselect\", newValue)}\n\nvar CommonAttributeGroupFacade.onShowFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onShow\")\n    set(newValue) {consumer.onTagEvent(this, \"onshow\", newValue)}\n\nvar CommonAttributeGroupFacade.onStalledFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onStalled\")\n    set(newValue) {consumer.onTagEvent(this, \"onstalled\", newValue)}\n\nvar CommonAttributeGroupFacade.onSubmitFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSubmit\")\n    set(newValue) {consumer.onTagEvent(this, \"onsubmit\", newValue)}\n\nvar CommonAttributeGroupFacade.onSuspendFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onSuspend\")\n    set(newValue) {consumer.onTagEvent(this, \"onsuspend\", newValue)}\n\nvar CommonAttributeGroupFacade.onTimeUpdateFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onTimeUpdate\")\n    set(newValue) {consumer.onTagEvent(this, \"ontimeupdate\", newValue)}\n\nvar CommonAttributeGroupFacade.onVolumeChangeFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onVolumeChange\")\n    set(newValue) {consumer.onTagEvent(this, \"onvolumechange\", newValue)}\n\nvar CommonAttributeGroupFacade.onWaitingFunction : (Event) -> Unit\n    get()  = throw UnsupportedOperationException(\"You can't read variable onWaiting\")\n    set(newValue) {consumer.onTagEvent(this, \"onwaiting\", newValue)}\n\n","package kotlinx.html.injector\n\nimport kotlinx.html.*\nimport kotlinx.html.dom.*\nimport org.w3c.dom.*\nimport kotlin.reflect.*\n\nfun <F : Any, T : Any> F.injectTo(bean : T, field : KMutableProperty1<T, in F>) {\n    field.set(bean, this)\n}\n\nprivate fun <F : Any, T : Any> F.injectToUnsafe(bean : T, field : KMutableProperty1<T, out F>) {\n    injectTo(bean, field.asDynamic())\n}\n\ninterface InjectCapture\nclass InjectByClassName(val className : String) : InjectCapture\nclass InjectByTagName(val tagName : String) : InjectCapture\nobject InjectRoot : InjectCapture\ninterface CustomCapture : InjectCapture {\n    fun apply(element : HTMLElement) : Boolean\n}\n\nclass InjectorConsumer<out T: Any>(val downstream : TagConsumer<HTMLElement>, val bean : T, rules : List<Pair<InjectCapture, KMutableProperty1<T, out HTMLElement>>>) : TagConsumer<HTMLElement> by downstream {\n\n    private val classesMap: Map<String, List<KMutableProperty1<T, out HTMLElement>>> = rules\n            .filter { it.first is InjectByClassName }\n            .map { it.first as InjectByClassName to it.second }\n            .groupBy ({ it.first.className }, { it.second })\n\n    private val tagNamesMap = rules\n            .filter { it.first is InjectByTagName }\n            .map { it.first as InjectByTagName to it.second }\n            .groupBy({ it.first.tagName.toLowerCase() }, { it.second })\n\n    private val rootCaptures = rules.filter { it.first == InjectRoot }.map { it.second }\n    private val customCaptures = rules.filter {it.first is CustomCapture}.map {it.first as CustomCapture to it.second}\n\n    override fun onTagEnd(tag: Tag) {\n        downstream.onTagEnd(tag)\n\n        val node = downstream.finalize()\n\n        if (classesMap.isNotEmpty()) {\n            node.classList.asList().flatMap { classesMap[it] ?: emptyList() }.forEach { field ->\n                node.injectToUnsafe(bean, field)\n            }\n        }\n\n        if (tagNamesMap.isNotEmpty()) {\n            tagNamesMap[node.tagName.toLowerCase()]?.forEach { field ->\n                node.injectToUnsafe(bean, field)\n            }\n        }\n\n        customCaptures.filter { it.first.apply(node) }.map {it.second}.forEach { field ->\n            node.injectToUnsafe(bean, field)\n        }\n    }\n\n    override fun finalize(): HTMLElement {\n        val node = downstream.finalize()\n        rootCaptures.forEach { field ->\n            node.injectToUnsafe(bean, field)\n        }\n\n        return node\n    }\n}\n\nfun <T: Any> TagConsumer<HTMLElement>.inject(bean : T, rules : List<Pair<InjectCapture, KMutableProperty1<T, out HTMLElement>>>) : TagConsumer<HTMLElement> = InjectorConsumer(this, bean, rules)\n\nfun <T: Any> HTMLElement.appendAndInject(bean : T, rules : List<Pair<InjectCapture, KMutableProperty1<T, out HTMLElement>>>, block : TagConsumer<HTMLElement>.() -> Unit) : List<HTMLElement> = append {\n    InjectorConsumer(this@append, bean, rules).block()\n    Unit\n}\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*,*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> = if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n\n\n\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V>\n        = LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>\n        = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V>\n        = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty() : Map<K, V> = this ?: emptyMap()\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K) : Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean\n        = @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V?\n        = @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K,V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transforms.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transforms.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when(size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M\n        = destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V>\n        = if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V>\n        = if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V>\n        = LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V>\n        = this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n\n/* Not available on platform: JS */\n\n\n\n\n/* Not available on platform: JS */\n\n\n\n","package kotlinx.html.consumers\n\nimport kotlinx.html.*\n\nfun <R> TagConsumer<R>.trace() : TagConsumer<R> = trace(println = { console.info(it) })\n","package kotlinx.html\n\nimport kotlin.js.Date\n\nactual fun currentTimeMillis(): Long = Date().getTime().toLong()\n","package kotlinx.html\n\nimport org.w3c.dom.events.*\n\ninterface TagConsumer<out R> {\n    fun onTagStart(tag: Tag)\n    fun onTagAttributeChange(tag: Tag, attribute: String, value: String?)\n    fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit)\n    fun onTagEnd(tag: Tag)\n    fun onTagContent(content: CharSequence)\n    fun onTagContentEntity(entity: Entities)\n    fun onTagContentUnsafe(block: Unsafe.() -> Unit)\n    fun onTagError(tag: Tag, exception: Throwable): Unit = throw exception\n    fun finalize(): R\n}\n\n@HtmlTagMarker\ninterface Tag {\n    val tagName: String\n    val consumer: TagConsumer<*>\n    val namespace: String?\n\n    val attributes: MutableMap<String, String>\n    val attributesEntries: Collection<Map.Entry<String, String>>\n\n    val inlineTag: Boolean\n    val emptyTag: Boolean\n\n    operator fun Entities.unaryPlus(): Unit {\n        entity(this)\n    }\n\n    operator fun String.unaryPlus(): Unit {\n        text(this)\n    }\n\n    fun text(s: String) {\n        consumer.onTagContent(s)\n    }\n\n    fun text(n: Number) {\n        text(n.toString())\n    }\n\n    fun entity(e: Entities) {\n        consumer.onTagContentEntity(e)\n    }\n}\n\n@HtmlTagMarker\ninterface Unsafe {\n    operator fun String.unaryPlus()\n    operator fun Entities.unaryPlus() = +text\n\n    fun raw(s: String) {\n        +s\n    }\n\n    fun raw(entity: Entities) {\n        +entity\n    }\n\n    fun raw(n: Number) {\n        +n.toString()\n    }\n}\n\ninterface AttributeEnum {\n    val realValue: String\n}\n\nfun <T : Tag> T.visit(block: T.() -> Unit) {\n    consumer.onTagStart(this)\n    try {\n        this.block()\n    } catch (err: Throwable) {\n        consumer.onTagError(this, err)\n    } finally {\n        consumer.onTagEnd(this)\n    }\n}\n\nfun <T : Tag, R> T.visitAndFinalize(consumer: TagConsumer<R>, block: T.() -> Unit): R {\n    if (this.consumer !== consumer) {\n        throw IllegalArgumentException(\"Wrong exception\")\n    }\n\n    visit(block)\n    return consumer.finalize()\n}\n\nfun attributesMapOf() = emptyMap\nfun attributesMapOf(key: String, value: String?): Map<String, String> = when (value) {\n    null -> emptyMap\n    else -> singletonMapOf(key, value)\n}\n\nfun attributesMapOf(vararg pairs: String?): Map<String, String> {\n    var result: MutableMap<String, String>? = null\n\n    for (i in 0..pairs.size - 1 step 2) {\n        val k = pairs[i]\n        val v = pairs[i + 1]\n        if (k != null && v != null) {\n            if (result == null) {\n                result = linkedMapOf()\n            }\n            result.put(k, v)\n        }\n    }\n\n    return result ?: emptyMap\n}\n\nfun singletonMapOf(key: String, value: String): Map<String, String> = SingletonStringMap(key, value)\n\nfun HTMLTag.unsafe(block: Unsafe.() -> Unit): Unit = consumer.onTagContentUnsafe(block)\n\nval emptyMap: Map<String, String> = emptyMap()\n\nclass DefaultUnsafe : Unsafe {\n    private val sb = StringBuilder()\n\n    override fun String.unaryPlus() {\n        sb.append(this)\n    }\n\n    override fun toString(): String = sb.toString()\n}\n\n@DslMarker\nannotation class HtmlTagMarker\n\ntypealias HtmlContent = FlowOrPhrasingContent\n\nprivate data class SingletonStringMap(override val key: String, override val value: String) : Map<String, String>, Map.Entry<String, String> {\n    override val entries: Set<Map.Entry<String, String>>\n        get() = setOf(this)\n\n    override val keys: Set<String>\n        get() = setOf(key)\n\n    override val size: Int\n        get() = 1\n\n    override val values: Collection<String>\n        get() = listOf(value)\n\n    override fun containsKey(key: String) = key == this.key\n    override fun containsValue(value: String) = value == this.value\n    override fun get(key: String): String? = if (key == this.key) value else null\n    override fun isEmpty() = false\n}\n","package kotlinx.html.attributes\n\nimport kotlinx.html.*\n\ninterface AttributeEncoder<T> {\n    fun encode(attributeName: String, value : T) : String\n    fun decode(attributeName: String, value : String) : T\n    fun empty(attributeName: String, tag: Tag) : T = throw IllegalStateException(\"Attribute $attributeName is not yet defined for tag ${tag.tagName}\")\n}\n\nabstract class Attribute<T>(val encoder : AttributeEncoder<T>) {\n    open operator fun get(thisRef: Tag, attributeName: String) : T =\n            thisRef.attributes[attributeName]?.let {\n                encoder.decode(attributeName, it)\n            } ?: encoder.empty(attributeName, thisRef)\n\n    open operator fun set(thisRef: Tag, attributeName: String, value : T) {\n        thisRef.attributes.put(attributeName, encoder.encode(attributeName, value))\n    }\n}\n\nobject StringEncoder : AttributeEncoder<String> {\n    override fun encode(attributeName: String, value: String): String = value\n    override fun decode(attributeName: String, value: String): String = value\n}\n\nclass StringAttribute : Attribute<String>(StringEncoder)\n\n//public class IntAttribute : Attribute<Int>() {\n//    override fun encode(desc: PropertyMetadata, value: Int): String = value.toString()\n//    override fun decode(desc: PropertyMetadata, value: String): Int = value.toInt()\n//}\n\nfun Boolean.booleanEncode() = toString()\nclass BooleanEncoder(val trueValue: String = \"true\", val falseValue: String = \"false\") : AttributeEncoder<Boolean> {\n    override fun encode(attributeName: String, value : Boolean): String = if (value) trueValue else falseValue\n    override fun decode(attributeName: String, value: String): Boolean = when (value) {\n        trueValue -> true\n        falseValue -> false\n        else -> throw IllegalArgumentException(\"Unknown value $value for $attributeName\")\n    }\n}\n\nclass BooleanAttribute(trueValue: String = \"true\", falseValue: String = \"false\") : Attribute<Boolean>(BooleanEncoder(trueValue, falseValue))\n\nfun Boolean.tickerEncode(attributeName: String) : String = if (this) attributeName else \"\"\nobject TickerEncoder : AttributeEncoder<Boolean> {\n    override fun encode(attributeName: String, value: Boolean): String = value.tickerEncode(attributeName)\n    override fun decode(attributeName: String, value: String): Boolean = value == attributeName\n}\n\nclass TickerAttribute : Attribute<Boolean>(TickerEncoder) {\n    override fun set(thisRef: Tag, attributeName: String, value: Boolean) {\n        if (value) {\n            thisRef.attributes.put(attributeName, attributeName)\n        } else {\n            thisRef.attributes.remove(attributeName)\n        }\n    }\n}\n\nclass EnumEncoder<T : AttributeEnum>(val valuesMap : Map<String, T>) : AttributeEncoder<T> {\n    override fun encode(attributeName: String, value: T): String = value.realValue\n    override fun decode(attributeName: String, value: String): T = valuesMap[value] ?: throw IllegalArgumentException(\"Unknown value $value for $attributeName\")\n}\n\nfun AttributeEnum.enumEncode() : String = realValue\nclass EnumAttribute<T : AttributeEnum>(val values : Map<String, T>) : Attribute<T>(EnumEncoder(values))\n\nfun stringSetDecode(value: String?): Set<String>? = value?.split(\"\\\\s+\".toRegex())?.filterNot {it.isEmpty()}?.toSet()\nfun Set<String>.stringSetEncode() = joinToString(\" \")\nobject StringSetEncoder : AttributeEncoder<Set<String>> {\n    override fun encode(attributeName: String, value: Set<String>): String = value.joinToString(\" \")\n    override fun decode(attributeName: String, value: String): Set<String> = stringSetDecode(value)!!\n    override fun empty(attributeName: String, tag: Tag) = emptySet<String>()\n}\nclass StringSetAttribute : Attribute<Set<String>>(StringSetEncoder)","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n\n/* Not available on platform: JS */\n\n\n\n\n\n\n","/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\n\npackage kotlin.text\n\nimport kotlin.comparisons.*\n\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] trimmed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        }\n        else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string with leading and trailing characters matching the [predicate] trimmed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] trimmed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string with leading characters matching the [predicate] trimmed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] trimmed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string with trailing characters matching the [predicate] trimmed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String\n        = (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array trimmed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string with leading and trailing characters from the [chars] array trimmed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array trimmed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string with leading and trailing characters from the [chars] array trimmed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array trimmed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string with trailing characters from the [chars] array trimmed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace trimmed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string with leading and trailing whitespace trimmed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string with leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string with trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @returns Returns a string, of length at least [length], consisting of string prepended with [padChar] as many times.\n * as are necessary to reach that length.\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String\n        = (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean = this == null || this.length == 0\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean = this == null || this.isBlank()\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence\n        = replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String\n        = (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String\n        = (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String\n        = (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String = regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length)\n            || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0..length-1) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n        this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\nprivate fun CharSequence.findAnyOf(chars: CharArray, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, Char>? {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        val index = if (!last) nativeIndexOf(char, startIndex) else nativeLastIndexOf(char, startIndex)\n        return if (index < 0) null else index to char\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..lastIndex else startIndex.coerceAtMost(lastIndex) downTo 0\n    for (index in indices) {\n        val charAtIndex = get(index)\n        val matchingCharIndex = chars.indexOfFirst { it.equals(charAtIndex, ignoreCase) }\n        if (matchingCharIndex >= 0)\n            return index to chars[matchingCharIndex]\n    }\n\n    return null\n}\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(chars, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(chars, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @returns An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @returns An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n        indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(private val input: CharSequence, private val startIndex: Int, private val limit: Int, private val getNextMatch: CharSequence.(Int) -> Pair<Int, Int>?): Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            }\n            else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                }\n                else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    }\n                    else {\n                        val (index,length) = match\n                        nextItem = currentStartIndex..index-1\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimiters, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to 1 } })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { startIndex -> findAnyOf(delimitersList, startIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> =\n        rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","package kotlinx.html\n\n\n@Deprecated(\"use legend instead\", ReplaceWith(\"legend(classes, block)\"))\nfun <T, C : TagConsumer<T>> C.legEnd(classes : String? = null, block : LEGEND.() -> Unit = {}) : T = legend(classes, block)\n\n@Deprecated(\"use legend instead\", ReplaceWith(\"legend(classes, block)\"))\nfun DETAILS.legEnd(classes : String? = null, block : LEGEND.() -> Unit = {}) : Unit = legend(classes, block)\n\n@Deprecated(\"use legend instead\", ReplaceWith(\"legend(classes, block)\"))\nfun FIELDSET.legEnd(classes : String? = null, block : LEGEND.() -> Unit = {}) : Unit = legend(classes, block)\n\n@Deprecated(\"use legend instead\", ReplaceWith(\"legend(classes, block)\"))\nfun FIGURE.legEnd(classes : String? = null, block : LEGEND.() -> Unit = {}) : Unit = legend(classes, block)\n\n@Deprecated(\"\", ReplaceWith(\"Draggable.htmlTrue\"))\ninline val Draggable.true_: Draggable get() = Draggable.htmlTrue\n\n@Deprecated(\"\", ReplaceWith(\"Draggable.htmlFalse\"))\ninline val Draggable.false_: Draggable get() = Draggable.htmlFalse\n\n@Deprecated(\"Use OBJECT instead\", ReplaceWith(\"OBJECT\", \"kotlinx.html.OBJECT\"))\ntypealias OBJECT_ = OBJECT\n\n@Deprecated(\"Use VAR type instead\", ReplaceWith(\"VAR\", \"kotlinx.html.VAR\"))\ntypealias VAR_ = VAR\n\n@Deprecated(\"\", ReplaceWith(\"htmlObject(classes, block)\", \"kotlinx.html.htmlObject\"))\nfun <T, C : TagConsumer<T>> C.object_(classes: String? = null, block: OBJECT.() -> Unit = {}) : T =\n        htmlObject(classes, block)\n\n@Deprecated(\"\", ReplaceWith(\"htmlVar(classes, block)\", \"kotlinx.html.htmlVar\"))\nfun <T, C : TagConsumer<T>> C.var_(classes: String? = null, block: VAR.() -> Unit = {}): T =\n        htmlVar(classes, block)\n\n@Deprecated(\"Use htmlVar instead\", ReplaceWith(\"htmlVar(classes, block)\", \"kotlinx.html.htmlVar\"))\nfun FlowOrPhrasingContent.var_(classes: String? = null, block: VAR.() -> Unit) {\n    htmlVar(classes, block)\n}\n\n@Deprecated(\"Use htmlObject instead\", ReplaceWith(\"htmlObject(classes, block)\", \"kotlinx.html.htmlObject\"))\nfun FlowOrInteractiveOrPhrasingContent.object_(classes : String? = null, block : OBJECT.() -> Unit = {}) =\n        htmlObject(classes, block)\n\n@Deprecated(\"use htmlFor instead\", ReplaceWith(\"htmlFor\"))\nvar LABEL.for_: String\n    get() = htmlFor\n    set(value) {\n        htmlFor = value\n    }\n\n@Deprecated(\"use htmlFor instead\", ReplaceWith(\"htmlFor\"))\nvar OUTPUT.for_: String\n    get() = htmlFor\n    set(value) {\n        htmlFor = value\n    }\n\n","package kotlinx.html.consumers\n\nimport kotlinx.html.Entities\nimport kotlinx.html.Tag\nimport kotlinx.html.TagConsumer\nimport kotlinx.html.Unsafe\nimport org.w3c.dom.events.Event\n\nclass DelayedConsumer<T>(val downstream : TagConsumer<T>) : TagConsumer<T> {\n    private var delayed : Tag? = null\n\n    override fun onTagStart(tag: Tag) {\n        processDelayedTag()\n        delayed = tag\n    }\n\n    override fun onTagAttributeChange(tag : Tag, attribute: String, value: String?) {\n        if (delayed == null || delayed != tag) {\n            throw IllegalStateException(\"You can't change tag attribute because it was already passed to the downstream\")\n        }\n    }\n\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n        if (delayed == null || delayed != tag) {\n            throw IllegalStateException(\"You can't change tag attribute because it was already passed to the downstream\")\n        }\n    }\n\n    override fun onTagEnd(tag: Tag) {\n        processDelayedTag()\n        downstream.onTagEnd(tag)\n    }\n\n    override fun onTagContent(content: CharSequence) {\n        processDelayedTag()\n        downstream.onTagContent(content)\n    }\n\n    override fun onTagContentEntity(entity: Entities) {\n        processDelayedTag()\n        downstream.onTagContentEntity(entity)\n    }\n\n    override fun onTagError(tag: Tag, exception: Throwable) {\n        processDelayedTag()\n        downstream.onTagError(tag, exception)\n    }\n\n    override fun finalize(): T {\n        processDelayedTag()\n        return downstream.finalize()\n    }\n\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n        processDelayedTag()\n        return downstream.onTagContentUnsafe(block)\n    }\n\n    private fun processDelayedTag() {\n        delayed?.let { tag ->\n            delayed = null\n            downstream.onTagStart(tag)\n        }\n    }\n}\n\nfun <T> TagConsumer<T>.delayed() : TagConsumer<T> = if (this is DelayedConsumer<T>) this else DelayedConsumer(this)","package kotlinx.html.impl\n\nimport kotlinx.html.Tag\nimport kotlinx.html.TagConsumer\n\nclass DelegatingMap(initialValues : Map<String, String>, val tag : Tag, val consumer : () -> TagConsumer<*>) : MutableMap<String, String> {\n    private var backing: Map<String, String> = initialValues\n    private var backingMutable = false\n\n    override val size: Int\n        get() = backing.size\n\n    override fun isEmpty(): Boolean = backing.isEmpty()\n\n    override fun containsKey(key: String): Boolean = backing.containsKey(key)\n    override fun containsValue(value: String): Boolean = backing.containsValue(value)\n    override fun get(key: String): String? = backing[key]\n\n    override fun put(key: String, value: String): String? {\n        val mutable = switchToMutable()\n\n        val old = mutable.put(key, value)\n        if (old != value) {\n            consumer().onTagAttributeChange(tag, key, value)\n        }\n\n        return old\n    }\n\n    override fun remove(key: String): String? {\n        val mutable = switchToMutable()\n\n        return mutable.remove(key)?.let { removed ->\n            if (key is String) {\n                consumer().onTagAttributeChange(tag, key, null)\n            }\n\n            removed\n        }\n    }\n\n    override fun putAll(from: Map<out String, String>) {\n        from.entries.forEach { e ->\n            put(e.key, e.value)\n        }\n    }\n\n    override fun clear() {\n        backing.forEach { e -> consumer().onTagAttributeChange(tag, e.key, null) }\n        backing = emptyMap()\n        backingMutable = false\n    }\n\n    val immutableEntries: Collection<Map.Entry<String, String>>\n        get() = backing.entries\n\n    private fun switchToMutable(): MutableMap<String, String> = if (backingMutable) {\n        backing\n    } else {\n        backingMutable = true\n        backing = LinkedHashMap(backing)\n        backing\n    } as MutableMap\n\n    override val keys: MutableSet<String>\n        get() = switchToMutable().keys  // TODO we need to handle changes too\n\n    override val values: MutableCollection<String>\n        get() = switchToMutable().values  // TODO we need to handle changes too\n\n    override val entries: MutableSet<MutableMap.MutableEntry<String, String>>\n        get() = switchToMutable().entries   // TODO we need to handle changes too\n}\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns a [List] containing all key-value pairs.\n */\npublic fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>> {\n    if (size == 0)\n        return emptyList()\n    val iterator = entries.iterator()\n    if (!iterator.hasNext())\n        return emptyList()\n    val first = iterator.next()\n    if (!iterator.hasNext())\n        return listOf(first.toPair())\n    val result = ArrayList<Pair<K, V>>(size)\n    result.add(first.toPair())\n    do {\n        result.add(iterator.next().toPair())\n    } while (iterator.hasNext())\n    return result\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each entry of original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.flatMap(transform: (Map.Entry<K, V>) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each entry of original map, to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo(destination: C, transform: (Map.Entry<K, V>) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R> Map<out K, V>.map(transform: (Map.Entry<K, V>) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each entry in the original map.\n */\npublic inline fun <K, V, R : Any> Map<out K, V>.mapNotNull(transform: (Map.Entry<K, V>) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each entry in the original map\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo(destination: C, transform: (Map.Entry<K, V>) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each entry of the original map\n * and appends the results to the given [destination].\n */\npublic inline fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo(destination: C, transform: (Map.Entry<K, V>) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns `true` if all entries match the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.all(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if map has at least one entry.\n */\npublic fun <K, V> Map<out K, V>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one entry matches the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.any(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of entries in this map.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of entries matching the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.count(predicate: (Map.Entry<K, V>) -> Boolean): Int {\n    if (isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Performs the given [action] on each entry.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <K, V> Map<out K, V>.forEach(action: (Map.Entry<K, V>) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Returns the first entry yielding the largest value of the given function or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.maxBy(selector)\n}\n\n/**\n * Returns the first entry having the largest value according to the provided [comparator] or `null` if there are no entries.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.maxWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.maxWith(comparator)\n}\n\n/**\n * Returns the first entry yielding the smallest value of the given function or `null` if there are no entries.\n */\npublic inline fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(selector: (Map.Entry<K, V>) -> R): Map.Entry<K, V>? {\n    return entries.minBy(selector)\n}\n\n/**\n * Returns the first entry having the smallest value according to the provided [comparator] or `null` if there are no entries.\n */\npublic fun <K, V> Map<out K, V>.minWith(comparator: Comparator<in Map.Entry<K, V>>): Map.Entry<K, V>? {\n    return entries.minWith(comparator)\n}\n\n/**\n * Returns `true` if the map has no entries.\n */\npublic fun <K, V> Map<out K, V>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no entries match the given [predicate].\n */\npublic inline fun <K, V> Map<out K, V>.none(predicate: (Map.Entry<K, V>) -> Boolean): Boolean {\n    if (isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each entry and returns the map itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K, V, M : Map<out K, V>> M.onEach(action: (Map.Entry<K, V>) -> Unit): M {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original map returning its entries when being iterated.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.asIterable(): Iterable<Map.Entry<K, V>> {\n    return entries\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original map returning its entries when being iterated.\n */\npublic fun <K, V> Map<out K, V>.asSequence(): Sequence<Map.Entry<K, V>> {\n    return entries.asSequence()\n}\n\n","package kotlinx.html.consumers\n\nimport kotlinx.html.Tag\nimport kotlinx.html.TagConsumer\n\nprivate class DelegatingExceptionConsumer<R>(\n        val underlying: TagConsumer<R>,\n        val handler: TagConsumer<R>.(Throwable) -> Unit) : TagConsumer<R> by underlying {\n\n    override fun onTagError(tag: Tag, exception: Throwable) = handler(underlying, exception)\n}\n\n/**\n * Allows simple exception handling. Any exceptions will forwarded to `handler` function.\n * For more control of error handling, implement `onTagError` in your subclass of `TagConsumer`\n */\nfun <R> TagConsumer<R>.catch(handler: TagConsumer<R>.(Throwable) -> Unit): TagConsumer<R>\n        = DelegatingExceptionConsumer(this, handler)\n","package kotlinx.html.consumers\n\nimport kotlinx.html.Entities\nimport kotlinx.html.Tag\nimport kotlinx.html.TagConsumer\nimport kotlinx.html.Unsafe\nimport org.w3c.dom.events.Event\n\nobject PredicateResults {\n    val PASS = PredicateResult.PASS\n    val SKIP = PredicateResult.SKIP\n    val DROP = PredicateResult.DROP\n}\n\nenum class PredicateResult {\n    PASS,\n    SKIP,\n    DROP\n}\n\nprivate class FilterTagConsumer<T>(val downstream : TagConsumer<T>, val predicate : (Tag) -> PredicateResult) : TagConsumer<T> {\n    private var currentLevel = 0\n    private var skippedLevels = HashSet<Int>()\n    private var dropLevel : Int? = null\n\n    override fun onTagStart(tag: Tag) {\n        currentLevel++\n\n        if (dropLevel == null) {\n            when (predicate(tag)) {\n                PredicateResult.PASS -> downstream.onTagStart(tag)\n                PredicateResult.SKIP -> skippedLevels.add(currentLevel)\n                PredicateResult.DROP -> dropLevel = currentLevel\n            }\n        }\n    }\n\n    override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\n        throw UnsupportedOperationException(\"this filter doesn't support attribute change\")\n    }\n\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n        throw UnsupportedOperationException(\"this filter doesn't support attribute change\")\n    }\n\n    override fun onTagEnd(tag: Tag) {\n        if (canPassCurrentLevel()) {\n            downstream.onTagEnd(tag)\n        }\n\n        skippedLevels.remove(currentLevel)\n        if (dropLevel == currentLevel) {\n            dropLevel = null\n        }\n\n        currentLevel--\n    }\n\n    override fun onTagContent(content: CharSequence) {\n        if (canPassCurrentLevel()) {\n            downstream.onTagContent(content)\n        }\n    }\n\n    override fun onTagContentEntity(entity: Entities) {\n        if (canPassCurrentLevel()) {\n            downstream.onTagContentEntity(entity)\n        }\n    }\n\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n        if (canPassCurrentLevel()) {\n            downstream.onTagContentUnsafe(block)\n        }\n    }\n\n    private fun canPassCurrentLevel() = dropLevel == null && currentLevel !in skippedLevels\n\n    override fun onTagError(tag: Tag, exception: Throwable) {\n        if (canPassCurrentLevel()) {\n            downstream.onTagError(tag, exception)\n        }\n    }\n\n    override fun finalize(): T = downstream.finalize()\n}\n\nfun <T> TagConsumer<T>.filter(predicate : PredicateResults.(Tag) -> PredicateResult) : TagConsumer<T> = FilterTagConsumer(this) { PredicateResults.predicate(it) }.delayed()","package kotlinx.html.consumers\n\nimport kotlinx.html.Entities\nimport kotlinx.html.Tag\nimport kotlinx.html.TagConsumer\nimport kotlinx.html.Unsafe\nimport org.w3c.dom.events.Event\n\nclass FinalizeConsumer<F, T>(val downstream : TagConsumer<F>, val block : (F, Boolean) -> T) : TagConsumer<T> {\n    private var level = 0\n\n    override fun onTagStart(tag: Tag) {\n        downstream.onTagStart(tag)\n        level ++\n    }\n    override fun onTagEnd(tag: Tag) {\n        downstream.onTagEnd(tag)\n        level --\n    }\n\n    override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) = downstream.onTagAttributeChange(tag, attribute, value)\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) = downstream.onTagEvent(tag, event, value)\n    override fun onTagContent(content: CharSequence) = downstream.onTagContent(content)\n    override fun onTagContentEntity(entity: Entities) = downstream.onTagContentEntity(entity)\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) = downstream.onTagContentUnsafe(block)\n    override fun onTagError(tag: Tag, exception: Throwable) = downstream.onTagError(tag, exception)\n\n    override fun finalize() = block(downstream.finalize(), level > 0)\n}\n\npublic fun <T> TagConsumer<T>.onFinalize(block : (from : T, partial : Boolean) -> Unit) : TagConsumer<T> = FinalizeConsumer(this) { to, partial -> block(to, partial); to }\npublic fun <F, T> TagConsumer<F>.onFinalizeMap(block : (from : F, partial : Boolean) -> T) : TagConsumer<T> = FinalizeConsumer(this, block)","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\ninterface CommonAttributeGroupFacade : Tag {\n}\nvar CommonAttributeGroupFacade.enableTheming : Boolean\n    get()  = attributeBooleanBoolean.get(this, \"EnableTheming\")\n    set(newValue) {attributeBooleanBoolean.set(this, \"EnableTheming\", newValue)}\n\nvar CommonAttributeGroupFacade.enableViewState : Boolean\n    get()  = attributeBooleanBoolean.get(this, \"EnableViewState\")\n    set(newValue) {attributeBooleanBoolean.set(this, \"EnableViewState\", newValue)}\n\nvar CommonAttributeGroupFacade.skinID : String\n    get()  = attributeStringString.get(this, \"SkinID\")\n    set(newValue) {attributeStringString.set(this, \"SkinID\", newValue)}\n\nvar CommonAttributeGroupFacade.visible : Boolean\n    get()  = attributeBooleanBoolean.get(this, \"Visible\")\n    set(newValue) {attributeBooleanBoolean.set(this, \"Visible\", newValue)}\n\nvar CommonAttributeGroupFacade.accessKey : String\n    get()  = attributeStringString.get(this, \"accesskey\")\n    set(newValue) {attributeStringString.set(this, \"accesskey\", newValue)}\n\nvar CommonAttributeGroupFacade.classes : Set<String>\n    get()  = attributeSetStringStringSet.get(this, \"class\")\n    set(newValue) {attributeSetStringStringSet.set(this, \"class\", newValue)}\n\nvar CommonAttributeGroupFacade.contentEditable : Boolean\n    get()  = attributeBooleanBoolean.get(this, \"contenteditable\")\n    set(newValue) {attributeBooleanBoolean.set(this, \"contenteditable\", newValue)}\n\nvar CommonAttributeGroupFacade.contextMenu : String\n    get()  = attributeStringString.get(this, \"contextmenu\")\n    set(newValue) {attributeStringString.set(this, \"contextmenu\", newValue)}\n\nvar CommonAttributeGroupFacade.dataFolderName : String\n    get()  = attributeStringString.get(this, \"data-FolderName\")\n    set(newValue) {attributeStringString.set(this, \"data-FolderName\", newValue)}\n\nvar CommonAttributeGroupFacade.dataMsgId : String\n    get()  = attributeStringString.get(this, \"data-MsgId\")\n    set(newValue) {attributeStringString.set(this, \"data-MsgId\", newValue)}\n\nvar CommonAttributeGroupFacade.dir : Dir\n    get()  = attributeDirEnumDirValues.get(this, \"dir\")\n    set(newValue) {attributeDirEnumDirValues.set(this, \"dir\", newValue)}\n\nvar CommonAttributeGroupFacade.draggable : Draggable\n    get()  = attributeDraggableEnumDraggableValues.get(this, \"draggable\")\n    set(newValue) {attributeDraggableEnumDraggableValues.set(this, \"draggable\", newValue)}\n\nvar CommonAttributeGroupFacade.hidden : Boolean\n    get()  = attributeBooleanTicker.get(this, \"hidden\")\n    set(newValue) {attributeBooleanTicker.set(this, \"hidden\", newValue)}\n\nvar CommonAttributeGroupFacade.id : String\n    get()  = attributeStringString.get(this, \"id\")\n    set(newValue) {attributeStringString.set(this, \"id\", newValue)}\n\nvar CommonAttributeGroupFacade.itemProp : String\n    get()  = attributeStringString.get(this, \"itemprop\")\n    set(newValue) {attributeStringString.set(this, \"itemprop\", newValue)}\n\nvar CommonAttributeGroupFacade.lang : String\n    get()  = attributeStringString.get(this, \"lang\")\n    set(newValue) {attributeStringString.set(this, \"lang\", newValue)}\n\nvar CommonAttributeGroupFacade.onAbort : String\n    get()  = attributeStringString.get(this, \"onabort\")\n    set(newValue) {attributeStringString.set(this, \"onabort\", newValue)}\n\nvar CommonAttributeGroupFacade.onBlur : String\n    get()  = attributeStringString.get(this, \"onblur\")\n    set(newValue) {attributeStringString.set(this, \"onblur\", newValue)}\n\nvar CommonAttributeGroupFacade.onCanPlay : String\n    get()  = attributeStringString.get(this, \"oncanplay\")\n    set(newValue) {attributeStringString.set(this, \"oncanplay\", newValue)}\n\nvar CommonAttributeGroupFacade.onCanPlayThrough : String\n    get()  = attributeStringString.get(this, \"oncanplaythrough\")\n    set(newValue) {attributeStringString.set(this, \"oncanplaythrough\", newValue)}\n\nvar CommonAttributeGroupFacade.onChange : String\n    get()  = attributeStringString.get(this, \"onchange\")\n    set(newValue) {attributeStringString.set(this, \"onchange\", newValue)}\n\nvar CommonAttributeGroupFacade.onClick : String\n    get()  = attributeStringString.get(this, \"onclick\")\n    set(newValue) {attributeStringString.set(this, \"onclick\", newValue)}\n\nvar CommonAttributeGroupFacade.onContextMenu : String\n    get()  = attributeStringString.get(this, \"oncontextmenu\")\n    set(newValue) {attributeStringString.set(this, \"oncontextmenu\", newValue)}\n\nvar CommonAttributeGroupFacade.onDoubleClick : String\n    get()  = attributeStringString.get(this, \"ondblclick\")\n    set(newValue) {attributeStringString.set(this, \"ondblclick\", newValue)}\n\nvar CommonAttributeGroupFacade.onDrag : String\n    get()  = attributeStringString.get(this, \"ondrag\")\n    set(newValue) {attributeStringString.set(this, \"ondrag\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragEnd : String\n    get()  = attributeStringString.get(this, \"ondragend\")\n    set(newValue) {attributeStringString.set(this, \"ondragend\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragEnter : String\n    get()  = attributeStringString.get(this, \"ondragenter\")\n    set(newValue) {attributeStringString.set(this, \"ondragenter\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragLeave : String\n    get()  = attributeStringString.get(this, \"ondragleave\")\n    set(newValue) {attributeStringString.set(this, \"ondragleave\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragOver : String\n    get()  = attributeStringString.get(this, \"ondragover\")\n    set(newValue) {attributeStringString.set(this, \"ondragover\", newValue)}\n\nvar CommonAttributeGroupFacade.onDragStart : String\n    get()  = attributeStringString.get(this, \"ondragstart\")\n    set(newValue) {attributeStringString.set(this, \"ondragstart\", newValue)}\n\nvar CommonAttributeGroupFacade.onDrop : String\n    get()  = attributeStringString.get(this, \"ondrop\")\n    set(newValue) {attributeStringString.set(this, \"ondrop\", newValue)}\n\nvar CommonAttributeGroupFacade.onDurationChange : String\n    get()  = attributeStringString.get(this, \"ondurationchange\")\n    set(newValue) {attributeStringString.set(this, \"ondurationchange\", newValue)}\n\nvar CommonAttributeGroupFacade.onEmptied : String\n    get()  = attributeStringString.get(this, \"onemptied\")\n    set(newValue) {attributeStringString.set(this, \"onemptied\", newValue)}\n\nvar CommonAttributeGroupFacade.onEnded : String\n    get()  = attributeStringString.get(this, \"onended\")\n    set(newValue) {attributeStringString.set(this, \"onended\", newValue)}\n\nvar CommonAttributeGroupFacade.onError : String\n    get()  = attributeStringString.get(this, \"onerror\")\n    set(newValue) {attributeStringString.set(this, \"onerror\", newValue)}\n\nvar CommonAttributeGroupFacade.onFocus : String\n    get()  = attributeStringString.get(this, \"onfocus\")\n    set(newValue) {attributeStringString.set(this, \"onfocus\", newValue)}\n\nvar CommonAttributeGroupFacade.onFormChange : String\n    get()  = attributeStringString.get(this, \"onformchange\")\n    set(newValue) {attributeStringString.set(this, \"onformchange\", newValue)}\n\nvar CommonAttributeGroupFacade.onFormInput : String\n    get()  = attributeStringString.get(this, \"onforminput\")\n    set(newValue) {attributeStringString.set(this, \"onforminput\", newValue)}\n\nvar CommonAttributeGroupFacade.onInput : String\n    get()  = attributeStringString.get(this, \"oninput\")\n    set(newValue) {attributeStringString.set(this, \"oninput\", newValue)}\n\nvar CommonAttributeGroupFacade.onInvalid : String\n    get()  = attributeStringString.get(this, \"oninvalid\")\n    set(newValue) {attributeStringString.set(this, \"oninvalid\", newValue)}\n\nvar CommonAttributeGroupFacade.onKeyDown : String\n    get()  = attributeStringString.get(this, \"onkeydown\")\n    set(newValue) {attributeStringString.set(this, \"onkeydown\", newValue)}\n\nvar CommonAttributeGroupFacade.onKeyPress : String\n    get()  = attributeStringString.get(this, \"onkeypress\")\n    set(newValue) {attributeStringString.set(this, \"onkeypress\", newValue)}\n\nvar CommonAttributeGroupFacade.onKeyUp : String\n    get()  = attributeStringString.get(this, \"onkeyup\")\n    set(newValue) {attributeStringString.set(this, \"onkeyup\", newValue)}\n\nvar CommonAttributeGroupFacade.onLoad : String\n    get()  = attributeStringString.get(this, \"onload\")\n    set(newValue) {attributeStringString.set(this, \"onload\", newValue)}\n\nvar CommonAttributeGroupFacade.onLoadedData : String\n    get()  = attributeStringString.get(this, \"onloadeddata\")\n    set(newValue) {attributeStringString.set(this, \"onloadeddata\", newValue)}\n\nvar CommonAttributeGroupFacade.onLoadedMetaData : String\n    get()  = attributeStringString.get(this, \"onloadedmetadata\")\n    set(newValue) {attributeStringString.set(this, \"onloadedmetadata\", newValue)}\n\nvar CommonAttributeGroupFacade.onLoadStart : String\n    get()  = attributeStringString.get(this, \"onloadstart\")\n    set(newValue) {attributeStringString.set(this, \"onloadstart\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseDown : String\n    get()  = attributeStringString.get(this, \"onmousedown\")\n    set(newValue) {attributeStringString.set(this, \"onmousedown\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseMove : String\n    get()  = attributeStringString.get(this, \"onmousemove\")\n    set(newValue) {attributeStringString.set(this, \"onmousemove\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseOut : String\n    get()  = attributeStringString.get(this, \"onmouseout\")\n    set(newValue) {attributeStringString.set(this, \"onmouseout\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseOver : String\n    get()  = attributeStringString.get(this, \"onmouseover\")\n    set(newValue) {attributeStringString.set(this, \"onmouseover\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseUp : String\n    get()  = attributeStringString.get(this, \"onmouseup\")\n    set(newValue) {attributeStringString.set(this, \"onmouseup\", newValue)}\n\nvar CommonAttributeGroupFacade.onMouseWheel : String\n    get()  = attributeStringString.get(this, \"onmousewheel\")\n    set(newValue) {attributeStringString.set(this, \"onmousewheel\", newValue)}\n\nvar CommonAttributeGroupFacade.onPause : String\n    get()  = attributeStringString.get(this, \"onpause\")\n    set(newValue) {attributeStringString.set(this, \"onpause\", newValue)}\n\nvar CommonAttributeGroupFacade.onPlay : String\n    get()  = attributeStringString.get(this, \"onplay\")\n    set(newValue) {attributeStringString.set(this, \"onplay\", newValue)}\n\nvar CommonAttributeGroupFacade.onPlaying : String\n    get()  = attributeStringString.get(this, \"onplaying\")\n    set(newValue) {attributeStringString.set(this, \"onplaying\", newValue)}\n\nvar CommonAttributeGroupFacade.onProgress : String\n    get()  = attributeStringString.get(this, \"onprogress\")\n    set(newValue) {attributeStringString.set(this, \"onprogress\", newValue)}\n\nvar CommonAttributeGroupFacade.onRateChange : String\n    get()  = attributeStringString.get(this, \"onratechange\")\n    set(newValue) {attributeStringString.set(this, \"onratechange\", newValue)}\n\nvar CommonAttributeGroupFacade.onReadyStateChange : String\n    get()  = attributeStringString.get(this, \"onreadystatechange\")\n    set(newValue) {attributeStringString.set(this, \"onreadystatechange\", newValue)}\n\nvar CommonAttributeGroupFacade.onScroll : String\n    get()  = attributeStringString.get(this, \"onscroll\")\n    set(newValue) {attributeStringString.set(this, \"onscroll\", newValue)}\n\nvar CommonAttributeGroupFacade.onSearch : String\n    get()  = attributeStringString.get(this, \"onsearch\")\n    set(newValue) {attributeStringString.set(this, \"onsearch\", newValue)}\n\nvar CommonAttributeGroupFacade.onSeeked : String\n    get()  = attributeStringString.get(this, \"onseeked\")\n    set(newValue) {attributeStringString.set(this, \"onseeked\", newValue)}\n\nvar CommonAttributeGroupFacade.onSeeking : String\n    get()  = attributeStringString.get(this, \"onseeking\")\n    set(newValue) {attributeStringString.set(this, \"onseeking\", newValue)}\n\nvar CommonAttributeGroupFacade.onSelect : String\n    get()  = attributeStringString.get(this, \"onselect\")\n    set(newValue) {attributeStringString.set(this, \"onselect\", newValue)}\n\nvar CommonAttributeGroupFacade.onShow : String\n    get()  = attributeStringString.get(this, \"onshow\")\n    set(newValue) {attributeStringString.set(this, \"onshow\", newValue)}\n\nvar CommonAttributeGroupFacade.onStalled : String\n    get()  = attributeStringString.get(this, \"onstalled\")\n    set(newValue) {attributeStringString.set(this, \"onstalled\", newValue)}\n\nvar CommonAttributeGroupFacade.onSubmit : String\n    get()  = attributeStringString.get(this, \"onsubmit\")\n    set(newValue) {attributeStringString.set(this, \"onsubmit\", newValue)}\n\nvar CommonAttributeGroupFacade.onSuspend : String\n    get()  = attributeStringString.get(this, \"onsuspend\")\n    set(newValue) {attributeStringString.set(this, \"onsuspend\", newValue)}\n\nvar CommonAttributeGroupFacade.onTimeUpdate : String\n    get()  = attributeStringString.get(this, \"ontimeupdate\")\n    set(newValue) {attributeStringString.set(this, \"ontimeupdate\", newValue)}\n\nvar CommonAttributeGroupFacade.onVolumeChange : String\n    get()  = attributeStringString.get(this, \"onvolumechange\")\n    set(newValue) {attributeStringString.set(this, \"onvolumechange\", newValue)}\n\nvar CommonAttributeGroupFacade.onWaiting : String\n    get()  = attributeStringString.get(this, \"onwaiting\")\n    set(newValue) {attributeStringString.set(this, \"onwaiting\", newValue)}\n\nvar CommonAttributeGroupFacade.role : String\n    get()  = attributeStringString.get(this, \"role\")\n    set(newValue) {attributeStringString.set(this, \"role\", newValue)}\n\nvar CommonAttributeGroupFacade.runAt : RunAt\n    get()  = attributeRunAtEnumRunAtValues.get(this, \"runat\")\n    set(newValue) {attributeRunAtEnumRunAtValues.set(this, \"runat\", newValue)}\n\nvar CommonAttributeGroupFacade.spellCheck : Boolean\n    get()  = attributeBooleanBoolean.get(this, \"spellcheck\")\n    set(newValue) {attributeBooleanBoolean.set(this, \"spellcheck\", newValue)}\n\nvar CommonAttributeGroupFacade.style : String\n    get()  = attributeStringString.get(this, \"style\")\n    set(newValue) {attributeStringString.set(this, \"style\", newValue)}\n\nvar CommonAttributeGroupFacade.subject : String\n    get()  = attributeStringString.get(this, \"subject\")\n    set(newValue) {attributeStringString.set(this, \"subject\", newValue)}\n\nvar CommonAttributeGroupFacade.tabIndex : String\n    get()  = attributeStringString.get(this, \"tabIndex\")\n    set(newValue) {attributeStringString.set(this, \"tabIndex\", newValue)}\n\nvar CommonAttributeGroupFacade.title : String\n    get()  = attributeStringString.get(this, \"title\")\n    set(newValue) {attributeStringString.set(this, \"title\", newValue)}\n\n\ninterface FormServerAttributeGroupFacade : Tag {\n}\nvar FormServerAttributeGroupFacade.defaultButton : String\n    get()  = attributeStringString.get(this, \"DefaultButton\")\n    set(newValue) {attributeStringString.set(this, \"DefaultButton\", newValue)}\n\nvar FormServerAttributeGroupFacade.defaultFocus : String\n    get()  = attributeStringString.get(this, \"DefaultFocus\")\n    set(newValue) {attributeStringString.set(this, \"DefaultFocus\", newValue)}\n\nvar FormServerAttributeGroupFacade.submitDisabledControls : Boolean\n    get()  = attributeBooleanBoolean.get(this, \"SubmitDisabledControls\")\n    set(newValue) {attributeBooleanBoolean.set(this, \"SubmitDisabledControls\", newValue)}\n\n\ninterface InputServerAttributeGroupFacade : Tag {\n}\nvar InputServerAttributeGroupFacade.causesValidation : Boolean\n    get()  = attributeBooleanBoolean.get(this, \"CausesValidation\")\n    set(newValue) {attributeBooleanBoolean.set(this, \"CausesValidation\", newValue)}\n\nvar InputServerAttributeGroupFacade.validationGroup : String\n    get()  = attributeStringString.get(this, \"ValidationGroup\")\n    set(newValue) {attributeStringString.set(this, \"ValidationGroup\", newValue)}\n\n\ninterface SelectServerAttributeGroupFacade : Tag {\n}\nvar SelectServerAttributeGroupFacade.dataSourceID : String\n    get()  = attributeStringString.get(this, \"DataSourceID\")\n    set(newValue) {attributeStringString.set(this, \"DataSourceID\", newValue)}\n\nvar SelectServerAttributeGroupFacade.dataTextField : String\n    get()  = attributeStringString.get(this, \"DataTextField\")\n    set(newValue) {attributeStringString.set(this, \"DataTextField\", newValue)}\n\nvar SelectServerAttributeGroupFacade.dataValueField : String\n    get()  = attributeStringString.get(this, \"DataValueField\")\n    set(newValue) {attributeStringString.set(this, \"DataValueField\", newValue)}\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\nfun <T, C : TagConsumer<T>> C.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit = {}) : T = A(attributesMapOf(\"href\", href,\"target\", target,\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.abbr(classes : String? = null, block : ABBR.() -> Unit = {}) : T = ABBR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.address(classes : String? = null, block : ADDRESS.() -> Unit = {}) : T = ADDRESS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : T = AREA(attributesMapOf(\"Shape\", shape?.enumEncode(),\"alt\", alt,\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.article(classes : String? = null, block : ARTICLE.() -> Unit = {}) : T = ARTICLE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.aside(classes : String? = null, block : ASIDE.() -> Unit = {}) : T = ASIDE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.audio(classes : String? = null, block : AUDIO.() -> Unit = {}) : T = AUDIO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.b(classes : String? = null, block : B.() -> Unit = {}) : T = B(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.base(classes : String? = null, block : BASE.() -> Unit = {}) : T = BASE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.bdi(classes : String? = null, block : BDI.() -> Unit = {}) : T = BDI(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.bdo(classes : String? = null, block : BDO.() -> Unit = {}) : T = BDO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.blockQuote(classes : String? = null, block : BLOCKQUOTE.() -> Unit = {}) : T = BLOCKQUOTE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.body(classes : String? = null, block : BODY.() -> Unit = {}) : T = BODY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.br(classes : String? = null, block : BR.() -> Unit = {}) : T = BR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : T = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"type\", type?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.canvas(classes : String? = null, content : String = \"\") : T = CANVAS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.canvas(classes : String? = null, block : CANVAS.() -> Unit = {}) : T = CANVAS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.caption(classes : String? = null, block : CAPTION.() -> Unit = {}) : T = CAPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.cite(classes : String? = null, block : CITE.() -> Unit = {}) : T = CITE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.code(classes : String? = null, block : CODE.() -> Unit = {}) : T = CODE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.col(classes : String? = null, block : COL.() -> Unit = {}) : T = COL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.colGroup(classes : String? = null, block : COLGROUP.() -> Unit = {}) : T = COLGROUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit = {}) : T = COMMAND(attributesMapOf(\"type\", type?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.dataList(classes : String? = null, block : DATALIST.() -> Unit = {}) : T = DATALIST(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.dd(classes : String? = null, block : DD.() -> Unit = {}) : T = DD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.del(classes : String? = null, block : DEL.() -> Unit = {}) : T = DEL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.details(classes : String? = null, block : DETAILS.() -> Unit = {}) : T = DETAILS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.dfn(classes : String? = null, block : DFN.() -> Unit = {}) : T = DFN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.dialog(classes : String? = null, block : DIALOG.() -> Unit = {}) : T = DIALOG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.div(classes : String? = null, block : DIV.() -> Unit = {}) : T = DIV(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.dl(classes : String? = null, block : DL.() -> Unit = {}) : T = DL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.dt(classes : String? = null, block : DT.() -> Unit = {}) : T = DT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.em(classes : String? = null, block : EM.() -> Unit = {}) : T = EM(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.embed(classes : String? = null, block : EMBED.() -> Unit = {}) : T = EMBED(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.fieldSet(classes : String? = null, block : FIELDSET.() -> Unit = {}) : T = FIELDSET(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.figcaption(classes : String? = null, block : FIGCAPTION.() -> Unit = {}) : T = FIGCAPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.figure(classes : String? = null, block : FIGURE.() -> Unit = {}) : T = FIGURE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.footer(classes : String? = null, block : FOOTER.() -> Unit = {}) : T = FOOTER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, block : FORM.() -> Unit = {}) : T = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", method?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.h1(classes : String? = null, block : H1.() -> Unit = {}) : T = H1(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.h2(classes : String? = null, block : H2.() -> Unit = {}) : T = H2(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.h3(classes : String? = null, block : H3.() -> Unit = {}) : T = H3(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.h4(classes : String? = null, block : H4.() -> Unit = {}) : T = H4(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.h5(classes : String? = null, block : H5.() -> Unit = {}) : T = H5(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.h6(classes : String? = null, block : H6.() -> Unit = {}) : T = H6(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\nfun <T, C : TagConsumer<T>> C.head(content : String = \"\") : T = HEAD(emptyMap, this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.head(block : HEAD.() -> Unit = {}) : T = HEAD(emptyMap, this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.header(classes : String? = null, block : HEADER.() -> Unit = {}) : T = HEADER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.hGroup(classes : String? = null, block : HGROUP.() -> Unit = {}) : T = HGROUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.hr(classes : String? = null, block : HR.() -> Unit = {}) : T = HR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\nfun <T, C : TagConsumer<T>> C.html(content : String = \"\") : T = HTML(emptyMap, this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.html(block : HTML.() -> Unit = {}) : T = HTML(emptyMap, this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.i(classes : String? = null, block : I.() -> Unit = {}) : T = I(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = \"\") : T = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit = {}) : T = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit = {}) : T = IMG(attributesMapOf(\"alt\", alt,\"src\", src,\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : T = INPUT(attributesMapOf(\"type\", type?.enumEncode(),\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.ins(classes : String? = null, block : INS.() -> Unit = {}) : T = INS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.kbd(classes : String? = null, block : KBD.() -> Unit = {}) : T = KBD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit = {}) : T = KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.label(classes : String? = null, block : LABEL.() -> Unit = {}) : T = LABEL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.legend(classes : String? = null, block : LEGEND.() -> Unit = {}) : T = LEGEND(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.li(classes : String? = null, block : LI.() -> Unit = {}) : T = LI(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.link(href : String? = null, rel : String? = null, type : String? = null, block : LINK.() -> Unit = {}) : T = LINK(attributesMapOf(\"href\", href,\"rel\", rel,\"type\", type), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit = {}) : T = MAP(attributesMapOf(\"name\", name,\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.mark(classes : String? = null, block : MARK.() -> Unit = {}) : T = MARK(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.math(classes : String? = null, block : MATH.() -> Unit = {}) : T = MATH(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.mathml(classes : String? = null, content : String = \"\") : T = MATHML(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.mathml(classes : String? = null, block : MATHML.() -> Unit = {}) : T = MATHML(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.meta(name : String? = null, content : String? = null, charset : String? = null, block : META.() -> Unit = {}) : T = META(attributesMapOf(\"name\", name,\"content\", content,\"charset\", charset), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.meter(classes : String? = null, block : METER.() -> Unit = {}) : T = METER(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.nav(classes : String? = null, block : NAV.() -> Unit = {}) : T = NAV(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit = {}) : T = NOSCRIPT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.htmlObject(classes : String? = null, block : OBJECT.() -> Unit = {}) : T = OBJECT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.ol(classes : String? = null, block : OL.() -> Unit = {}) : T = OL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.optGroup(label : String? = null, classes : String? = null, block : OPTGROUP.() -> Unit = {}) : T = OPTGROUP(attributesMapOf(\"label\", label,\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.option(classes : String? = null, content : String = \"\") : T = OPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.option(classes : String? = null, block : OPTION.() -> Unit = {}) : T = OPTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.output(classes : String? = null, block : OUTPUT.() -> Unit = {}) : T = OUTPUT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.p(classes : String? = null, block : P.() -> Unit = {}) : T = P(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.param(name : String? = null, value : String? = null, block : PARAM.() -> Unit = {}) : T = PARAM(attributesMapOf(\"name\", name,\"value\", value), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.pre(classes : String? = null, block : PRE.() -> Unit = {}) : T = PRE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.progress(classes : String? = null, block : PROGRESS.() -> Unit = {}) : T = PROGRESS(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.q(classes : String? = null, block : Q.() -> Unit = {}) : T = Q(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.rp(classes : String? = null, block : RP.() -> Unit = {}) : T = RP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.rt(classes : String? = null, block : RT.() -> Unit = {}) : T = RT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.ruby(classes : String? = null, block : RUBY.() -> Unit = {}) : T = RUBY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.samp(classes : String? = null, block : SAMP.() -> Unit = {}) : T = SAMP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\nfun <T, C : TagConsumer<T>> C.script(type : String? = null, src : String? = null, content : String = \"\") : T = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.script(type : String? = null, src : String? = null, block : SCRIPT.() -> Unit = {}) : T = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.section(classes : String? = null, block : SECTION.() -> Unit = {}) : T = SECTION(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.select(classes : String? = null, block : SELECT.() -> Unit = {}) : T = SELECT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.small(classes : String? = null, block : SMALL.() -> Unit = {}) : T = SMALL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.source(classes : String? = null, block : SOURCE.() -> Unit = {}) : T = SOURCE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.span(classes : String? = null, block : SPAN.() -> Unit = {}) : T = SPAN(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.strong(classes : String? = null, block : STRONG.() -> Unit = {}) : T = STRONG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\nfun <T, C : TagConsumer<T>> C.style(type : String? = null, content : String = \"\") : T = STYLE(attributesMapOf(\"type\", type), this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.style(type : String? = null, block : STYLE.() -> Unit = {}) : T = STYLE(attributesMapOf(\"type\", type), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.sub(classes : String? = null, block : SUB.() -> Unit = {}) : T = SUB(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.sup(classes : String? = null, block : SUP.() -> Unit = {}) : T = SUP(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.svg(classes : String? = null, content : String = \"\") : T = SVG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.svg(classes : String? = null, block : SVG.() -> Unit = {}) : T = SVG(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.table(classes : String? = null, block : TABLE.() -> Unit = {}) : T = TABLE(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.tbody(classes : String? = null, block : TBODY.() -> Unit = {}) : T = TBODY(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.td(classes : String? = null, block : TD.() -> Unit = {}) : T = TD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = \"\") : T = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : T = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.tfoot(classes : String? = null, block : TFOOT.() -> Unit = {}) : T = TFOOT(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.th(scope : ThScope? = null, classes : String? = null, block : TH.() -> Unit = {}) : T = TH(attributesMapOf(\"scope\", scope?.enumEncode(),\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.thead(classes : String? = null, block : THEAD.() -> Unit = {}) : T = THEAD(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.time(classes : String? = null, block : TIME.() -> Unit = {}) : T = TIME(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.title(content : String = \"\") : T = TITLE(emptyMap, this).visitAndFinalize(this, {+content})\nfun <T, C : TagConsumer<T>> C.title(block : TITLE.() -> Unit = {}) : T = TITLE(emptyMap, this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.tr(classes : String? = null, block : TR.() -> Unit = {}) : T = TR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.ul(classes : String? = null, block : UL.() -> Unit = {}) : T = UL(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.htmlVar(classes : String? = null, block : VAR.() -> Unit = {}) : T = VAR(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\nfun <T, C : TagConsumer<T>> C.video(classes : String? = null, block : VIDEO.() -> Unit = {}) : T = VIDEO(attributesMapOf(\"class\", classes), this).visitAndFinalize(this, block)\n\n","package kotlinx.html\n\nimport kotlinx.html.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\nenum class Entities {\n    nbsp\n,    lt\n,    gt\n,    quot\n,    amp\n,    apos\n,    iexcl\n,    cent\n,    pound\n,    curren\n,    yen\n,    brvbar\n,    sect\n,    uml\n,    copy\n,    ordf\n,    laquo\n,    not\n,    shy\n,    reg\n,    macr\n,    deg\n,    plusmn\n,    sup2\n,    sup3\n,    acute\n,    micro\n,    para\n,    middot\n,    cedil\n,    sup1\n,    ordm\n,    raquo\n,    frac14\n,    frac12\n,    frac34\n,    iquest\n,    Agrave\n,    Aacute\n,    Acirc\n,    Atilde\n,    Auml\n,    Aring\n,    AElig\n,    Ccedil\n,    Egrave\n,    Eacute\n,    Ecirc\n,    Euml\n,    Igrave\n,    Iacute\n,    Icirc\n,    Iuml\n,    ETH\n,    Ntilde\n,    Ograve\n,    Oacute\n,    Ocirc\n,    Otilde\n,    Ouml\n,    times\n,    Oslash\n,    Ugrave\n,    Uacute\n,    Ucirc\n,    Uuml\n,    Yacute\n,    THORN\n,    szlig\n,    agrave\n,    aacute\n,    acirc\n,    atilde\n,    auml\n,    aring\n,    aelig\n,    ccedil\n,    egrave\n,    eacute\n,    ecirc\n,    euml\n,    igrave\n,    iacute\n,    icirc\n,    iuml\n,    eth\n,    ntilde\n,    ograve\n,    oacute\n,    ocirc\n,    otilde\n,    ouml\n,    divide\n,    oslash\n,    ugrave\n,    uacute\n,    ucirc\n,    uuml\n,    yacute\n,    thorn\n,    yuml\n;\nval text : String\n    get()  = \"&\" + this.toString() + \";\"\n\n}\n","package kotlinx.html\n\nimport kotlinx.html.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nenum class Dir(override val realValue : String) : AttributeEnum {\n    ltr(\"ltr\"),\n    rtl(\"rtl\")\n}\n\ninternal val dirValues : Map<String, Dir> = Dir.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class Draggable(override val realValue : String) : AttributeEnum {\n    htmlTrue(\"true\"),\n    htmlFalse(\"false\"),\n    auto(\"auto\")\n}\n\ninternal val draggableValues : Map<String, Draggable> = Draggable.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class RunAt(override val realValue : String) : AttributeEnum {\n    server(\"server\")\n}\n\ninternal val runAtValues : Map<String, RunAt> = RunAt.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject ATarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nobject ARel {\n    val alternate : String = \"Alternate\"\n    val appEndIx : String = \"Appendix\"\n    val bookmark : String = \"Bookmark\"\n    val chapter : String = \"Chapter\"\n    val contentS : String = \"Contents\"\n    val copyright : String = \"Copyright\"\n    val glossary : String = \"Glossary\"\n    val help : String = \"Help\"\n    val index : String = \"Index\"\n    val next : String = \"Next\"\n    val prev : String = \"Prev\"\n    val section : String = \"Section\"\n    val start : String = \"Start\"\n    val stylesheet : String = \"Stylesheet\"\n    val subsection : String = \"Subsection\"\n\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\n}\n\n@Suppress(\"unused\")\nobject AType {\n    val textAsp : String = \"text/asp\"\n    val textAsa : String = \"text/asa\"\n    val textCss : String = \"text/css\"\n    val textHtml : String = \"text/html\"\n    val textJavaScript : String = \"text/javascript\"\n    val textPlain : String = \"text/plain\"\n    val textScriptLet : String = \"text/scriptlet\"\n    val textXComponent : String = \"text/x-component\"\n    val textXHtmlInsertion : String = \"text/x-html-insertion\"\n    val textXml : String = \"text/xml\"\n\n    val values : List<String> = listOf(\"textAsp\", \"textAsa\", \"textCss\", \"textHtml\", \"textJavaScript\", \"textPlain\", \"textScriptLet\", \"textXComponent\", \"textXHtmlInsertion\", \"textXml\")\n}\n\n@Suppress(\"unused\")\nenum class AreaShape(override val realValue : String) : AttributeEnum {\n    rect(\"rect\"),\n    circle(\"circle\"),\n    poly(\"poly\"),\n    default(\"default\")\n}\n\ninternal val areaShapeValues : Map<String, AreaShape> = AreaShape.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject AreaTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nobject AreaRel {\n    val alternate : String = \"Alternate\"\n    val appEndIx : String = \"Appendix\"\n    val bookmark : String = \"Bookmark\"\n    val chapter : String = \"Chapter\"\n    val contentS : String = \"Contents\"\n    val copyright : String = \"Copyright\"\n    val glossary : String = \"Glossary\"\n    val help : String = \"Help\"\n    val index : String = \"Index\"\n    val next : String = \"Next\"\n    val prev : String = \"Prev\"\n    val section : String = \"Section\"\n    val start : String = \"Start\"\n    val stylesheet : String = \"Stylesheet\"\n    val subsection : String = \"Subsection\"\n\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\n}\n\n@Suppress(\"unused\")\nobject BaseTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nenum class ButtonFormEncType(override val realValue : String) : AttributeEnum {\n    multipartFormData(\"multipart/form-data\"),\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\n    textPlain(\"text/plain\")\n}\n\ninternal val buttonFormEncTypeValues : Map<String, ButtonFormEncType> = ButtonFormEncType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class ButtonFormMethod(override val realValue : String) : AttributeEnum {\n    get(\"get\"),\n    post(\"post\"),\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\n}\n\ninternal val buttonFormMethodValues : Map<String, ButtonFormMethod> = ButtonFormMethod.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject ButtonFormTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nenum class ButtonType(override val realValue : String) : AttributeEnum {\n    button(\"button\"),\n    reset(\"reset\"),\n    submit(\"submit\")\n}\n\ninternal val buttonTypeValues : Map<String, ButtonType> = ButtonType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class CommandType(override val realValue : String) : AttributeEnum {\n    command(\"command\"),\n    checkBox(\"checkbox\"),\n    radio(\"radio\")\n}\n\ninternal val commandTypeValues : Map<String, CommandType> = CommandType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class FormEncType(override val realValue : String) : AttributeEnum {\n    multipartFormData(\"multipart/form-data\"),\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\n    textPlain(\"text/plain\")\n}\n\ninternal val formEncTypeValues : Map<String, FormEncType> = FormEncType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class FormMethod(override val realValue : String) : AttributeEnum {\n    get(\"get\"),\n    post(\"post\"),\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\n}\n\ninternal val formMethodValues : Map<String, FormMethod> = FormMethod.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject FormTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nobject IframeName {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nenum class IframeSandbox(override val realValue : String) : AttributeEnum {\n    allowSameOrigin(\"allow-same-origin\"),\n    allowFormS(\"allow-forms\"),\n    allowScripts(\"allow-scripts\")\n}\n\ninternal val iframeSandboxValues : Map<String, IframeSandbox> = IframeSandbox.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class InputType(override val realValue : String) : AttributeEnum {\n    button(\"button\"),\n    checkBox(\"checkbox\"),\n    color(\"color\"),\n    date(\"date\"),\n    dateTime(\"datetime\"),\n    dateTimeLocal(\"datetime-local\"),\n    email(\"email\"),\n    file(\"file\"),\n    hidden(\"hidden\"),\n    image(\"image\"),\n    month(\"month\"),\n    number(\"number\"),\n    password(\"password\"),\n    radio(\"radio\"),\n    range(\"range\"),\n    reset(\"reset\"),\n    search(\"search\"),\n    submit(\"submit\"),\n    text(\"text\"),\n    tel(\"tel\"),\n    time(\"time\"),\n    url(\"url\"),\n    week(\"week\")\n}\n\ninternal val inputTypeValues : Map<String, InputType> = InputType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class InputFormEncType(override val realValue : String) : AttributeEnum {\n    multipartFormData(\"multipart/form-data\"),\n    applicationXWwwFormUrlEncoded(\"application/x-www-form-urlencoded\"),\n    textPlain(\"text/plain\")\n}\n\ninternal val inputFormEncTypeValues : Map<String, InputFormEncType> = InputFormEncType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class InputFormMethod(override val realValue : String) : AttributeEnum {\n    get(\"get\"),\n    post(\"post\"),\n    @Deprecated(\"method is not allowed in browsers\") put(\"put\"),\n    @Deprecated(\"method is not allowed in browsers\") delete(\"delete\"),\n    @Deprecated(\"method is not allowed in browsers\") patch(\"patch\")\n}\n\ninternal val inputFormMethodValues : Map<String, InputFormMethod> = InputFormMethod.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject InputFormTarget {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nenum class KeyGenKeyType(override val realValue : String) : AttributeEnum {\n    rsa(\"rsa\")\n}\n\ninternal val keyGenKeyTypeValues : Map<String, KeyGenKeyType> = KeyGenKeyType.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nobject LinkRel {\n    val alternate : String = \"Alternate\"\n    val appEndIx : String = \"Appendix\"\n    val bookmark : String = \"Bookmark\"\n    val chapter : String = \"Chapter\"\n    val contentS : String = \"Contents\"\n    val copyright : String = \"Copyright\"\n    val glossary : String = \"Glossary\"\n    val help : String = \"Help\"\n    val index : String = \"Index\"\n    val next : String = \"Next\"\n    val prev : String = \"Prev\"\n    val section : String = \"Section\"\n    val start : String = \"Start\"\n    val stylesheet : String = \"Stylesheet\"\n    val subsection : String = \"Subsection\"\n\n    val values : List<String> = listOf(\"alternate\", \"appEndIx\", \"bookmark\", \"chapter\", \"contentS\", \"copyright\", \"glossary\", \"help\", \"index\", \"next\", \"prev\", \"section\", \"start\", \"stylesheet\", \"subsection\")\n}\n\n@Suppress(\"unused\")\nobject LinkMedia {\n    val screen : String = \"screen\"\n    val print : String = \"print\"\n    val tty : String = \"tty\"\n    val tv : String = \"tv\"\n    val projection : String = \"projection\"\n    val handheld : String = \"handheld\"\n    val braille : String = \"braille\"\n    val aural : String = \"aural\"\n    val all : String = \"all\"\n\n    val values : List<String> = listOf(\"screen\", \"print\", \"tty\", \"tv\", \"projection\", \"handheld\", \"braille\", \"aural\", \"all\")\n}\n\n@Suppress(\"unused\")\nobject LinkType {\n    val textAsp : String = \"text/asp\"\n    val textAsa : String = \"text/asa\"\n    val textCss : String = \"text/css\"\n    val textHtml : String = \"text/html\"\n    val textJavaScript : String = \"text/javascript\"\n    val textPlain : String = \"text/plain\"\n    val textScriptLet : String = \"text/scriptlet\"\n    val textXComponent : String = \"text/x-component\"\n    val textXHtmlInsertion : String = \"text/x-html-insertion\"\n    val textXml : String = \"text/xml\"\n\n    val values : List<String> = listOf(\"textAsp\", \"textAsa\", \"textCss\", \"textHtml\", \"textJavaScript\", \"textPlain\", \"textScriptLet\", \"textXComponent\", \"textXHtmlInsertion\", \"textXml\")\n}\n\n@Suppress(\"unused\")\nobject MetaHttpEquiv {\n    val contentLanguage : String = \"content-language\"\n    val contentType : String = \"content-type\"\n    val defaultStyle : String = \"default-style\"\n    val refresh : String = \"refresh\"\n\n    val values : List<String> = listOf(\"contentLanguage\", \"contentType\", \"defaultStyle\", \"refresh\")\n}\n\n@Suppress(\"unused\")\nobject ObjectName {\n    val blank : String = \"_blank\"\n    val parent : String = \"_parent\"\n    val self : String = \"_self\"\n    val top : String = \"_top\"\n\n    val values : List<String> = listOf(\"blank\", \"parent\", \"self\", \"top\")\n}\n\n@Suppress(\"unused\")\nobject ScriptType {\n    val textEcmaScript : String = \"text/ecmascript\"\n    val textJavaScript : String = \"text/javascript\"\n    val textJavaScript10 : String = \"text/javascript1.0\"\n    val textJavaScript11 : String = \"text/javascript1.1\"\n    val textJavaScript12 : String = \"text/javascript1.2\"\n    val textJavaScript13 : String = \"text/javascript1.3\"\n    val textJavaScript14 : String = \"text/javascript1.4\"\n    val textJavaScript15 : String = \"text/javascript1.5\"\n    val textJScript : String = \"text/jscript\"\n    val textXJavaScript : String = \"text/x-javascript\"\n    val textXEcmaScript : String = \"text/x-ecmascript\"\n    val textVbScript : String = \"text/vbscript\"\n\n    val values : List<String> = listOf(\"textEcmaScript\", \"textJavaScript\", \"textJavaScript10\", \"textJavaScript11\", \"textJavaScript12\", \"textJavaScript13\", \"textJavaScript14\", \"textJavaScript15\", \"textJScript\", \"textXJavaScript\", \"textXEcmaScript\", \"textVbScript\")\n}\n\n@Suppress(\"unused\")\nobject StyleType {\n    val textCss : String = \"text/css\"\n\n    val values : List<String> = listOf(\"textCss\")\n}\n\n@Suppress(\"unused\")\nobject StyleMedia {\n    val screen : String = \"screen\"\n    val print : String = \"print\"\n    val tty : String = \"tty\"\n    val tv : String = \"tv\"\n    val projection : String = \"projection\"\n    val handheld : String = \"handheld\"\n    val braille : String = \"braille\"\n    val aural : String = \"aural\"\n    val all : String = \"all\"\n\n    val values : List<String> = listOf(\"screen\", \"print\", \"tty\", \"tv\", \"projection\", \"handheld\", \"braille\", \"aural\", \"all\")\n}\n\n@Suppress(\"unused\")\nenum class TextAreaWrap(override val realValue : String) : AttributeEnum {\n    hard(\"hard\"),\n    soft(\"soft\")\n}\n\ninternal val textAreaWrapValues : Map<String, TextAreaWrap> = TextAreaWrap.values().associateBy { it.realValue }\n@Suppress(\"unused\")\nenum class ThScope(override val realValue : String) : AttributeEnum {\n    col(\"col\"),\n    colGroup(\"colgroup\"),\n    row(\"row\"),\n    rowGroup(\"rowgroup\")\n}\n\ninternal val thScopeValues : Map<String, ThScope> = ThScope.values().associateBy { it.realValue }\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\ninterface FlowContent : FlowOrHeadingContent, FlowOrMetaDataContent, FlowOrInteractiveContent, FlowOrPhrasingContent, FlowOrPhrasingOrMetaDataContent, SectioningOrFlowContent, FlowOrInteractiveOrPhrasingContent, Tag {\n}\n\ninterface HeadingContent : FlowOrHeadingContent, Tag {\n}\n\ninterface InteractiveContent : FlowOrInteractiveContent, FlowOrInteractiveOrPhrasingContent, Tag {\n}\n\ninterface MetaDataContent : FlowOrMetaDataContent, FlowOrPhrasingOrMetaDataContent, Tag {\n}\n\ninterface PhrasingContent : FlowOrPhrasingContent, FlowOrPhrasingOrMetaDataContent, FlowOrInteractiveOrPhrasingContent, Tag {\n}\n\ninterface SectioningContent : SectioningOrFlowContent, Tag {\n}\n\nfun FlowContent.address(classes : String? = null, block : ADDRESS.() -> Unit = {}) : Unit = ADDRESS(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.blockQuote(classes : String? = null, block : BLOCKQUOTE.() -> Unit = {}) : Unit = BLOCKQUOTE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.dialog(classes : String? = null, block : DIALOG.() -> Unit = {}) : Unit = DIALOG(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.div(classes : String? = null, block : DIV.() -> Unit = {}) : Unit = DIV(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.dl(classes : String? = null, block : DL.() -> Unit = {}) : Unit = DL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.fieldSet(classes : String? = null, block : FIELDSET.() -> Unit = {}) : Unit = FIELDSET(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.figure(classes : String? = null, block : FIGURE.() -> Unit = {}) : Unit = FIGURE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.figcaption(classes : String? = null, block : FIGCAPTION.() -> Unit = {}) : Unit = FIGCAPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.footer(classes : String? = null, block : FOOTER.() -> Unit = {}) : Unit = FOOTER(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.form(action : String? = null, encType : FormEncType? = null, method : FormMethod? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", method?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowContent.getForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.get.realValue,\"class\", classes), consumer).visit(block)\nfun FlowContent.postForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.post.realValue,\"class\", classes), consumer).visit(block)\nfun FlowContent.putForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.put.realValue,\"class\", classes), consumer).visit(block)\nfun FlowContent.deleteForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.delete.realValue,\"class\", classes), consumer).visit(block)\nfun FlowContent.patchForm(action : String? = null, encType : FormEncType? = null, classes : String? = null, block : FORM.() -> Unit = {}) : Unit = FORM(attributesMapOf(\"action\", action,\"enctype\", encType?.enumEncode(),\"method\", FormMethod.patch.realValue,\"class\", classes), consumer).visit(block)\n\nfun FlowContent.header(classes : String? = null, block : HEADER.() -> Unit = {}) : Unit = HEADER(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.hr(classes : String? = null, block : HR.() -> Unit = {}) : Unit = HR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.ol(classes : String? = null, block : OL.() -> Unit = {}) : Unit = OL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.p(classes : String? = null, block : P.() -> Unit = {}) : Unit = P(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.pre(classes : String? = null, block : PRE.() -> Unit = {}) : Unit = PRE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.table(classes : String? = null, block : TABLE.() -> Unit = {}) : Unit = TABLE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowContent.ul(classes : String? = null, block : UL.() -> Unit = {}) : Unit = UL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun MetaDataContent.base(classes : String? = null, block : BASE.() -> Unit = {}) : Unit = BASE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun MetaDataContent.title(block : TITLE.() -> Unit = {}) : Unit = TITLE(emptyMap, consumer).visit(block)\nfun MetaDataContent.title(content : String = \"\") : Unit = TITLE(emptyMap, consumer).visit({+content})\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\ninterface FlowOrHeadingContent : Tag {\n}\n\ninterface FlowOrMetaDataContent : FlowOrPhrasingOrMetaDataContent, Tag {\n}\n\ninterface FlowOrInteractiveContent : FlowOrInteractiveOrPhrasingContent, Tag {\n}\n\ninterface FlowOrPhrasingContent : FlowOrInteractiveOrPhrasingContent, FlowOrPhrasingOrMetaDataContent, Tag {\n}\n\ninterface FlowOrPhrasingOrMetaDataContent : Tag {\n}\n\ninterface SectioningOrFlowContent : Tag {\n}\n\ninterface FlowOrInteractiveOrPhrasingContent : Tag {\n}\n\n\n\nfun FlowOrHeadingContent.h1(classes : String? = null, block : H1.() -> Unit = {}) : Unit = H1(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrHeadingContent.h2(classes : String? = null, block : H2.() -> Unit = {}) : Unit = H2(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrHeadingContent.h3(classes : String? = null, block : H3.() -> Unit = {}) : Unit = H3(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrHeadingContent.h4(classes : String? = null, block : H4.() -> Unit = {}) : Unit = H4(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrHeadingContent.h5(classes : String? = null, block : H5.() -> Unit = {}) : Unit = H5(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrHeadingContent.h6(classes : String? = null, block : H6.() -> Unit = {}) : Unit = H6(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrHeadingContent.hGroup(classes : String? = null, block : HGROUP.() -> Unit = {}) : Unit = HGROUP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\nfun FlowOrMetaDataContent.style(type : String? = null, block : STYLE.() -> Unit = {}) : Unit = STYLE(attributesMapOf(\"type\", type), consumer).visit(block)\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\nfun FlowOrMetaDataContent.style(type : String? = null, content : String = \"\") : Unit = STYLE(attributesMapOf(\"type\", type), consumer).visit({+content})\n\n\nfun FlowOrInteractiveContent.details(classes : String? = null, block : DETAILS.() -> Unit = {}) : Unit = DETAILS(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\nfun FlowOrPhrasingContent.abbr(classes : String? = null, block : ABBR.() -> Unit = {}) : Unit = ABBR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.area(shape : AreaShape? = null, alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", shape?.enumEncode(),\"alt\", alt,\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingContent.rectArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.rect.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingContent.circleArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.circle.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingContent.polyArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.poly.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingContent.defaultArea(alt : String? = null, classes : String? = null, block : AREA.() -> Unit = {}) : Unit = AREA(attributesMapOf(\"Shape\", AreaShape.default.realValue,\"alt\", alt,\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.b(classes : String? = null, block : B.() -> Unit = {}) : Unit = B(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.bdi(classes : String? = null, block : BDI.() -> Unit = {}) : Unit = BDI(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.bdo(classes : String? = null, block : BDO.() -> Unit = {}) : Unit = BDO(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.br(classes : String? = null, block : BR.() -> Unit = {}) : Unit = BR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.canvas(classes : String? = null, block : CANVAS.() -> Unit = {}) : Unit = CANVAS(attributesMapOf(\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingContent.canvas(classes : String? = null, content : String = \"\") : Unit = CANVAS(attributesMapOf(\"class\", classes), consumer).visit({+content})\n\nfun FlowOrPhrasingContent.cite(classes : String? = null, block : CITE.() -> Unit = {}) : Unit = CITE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.code(classes : String? = null, block : CODE.() -> Unit = {}) : Unit = CODE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.dataList(classes : String? = null, block : DATALIST.() -> Unit = {}) : Unit = DATALIST(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.del(classes : String? = null, block : DEL.() -> Unit = {}) : Unit = DEL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.dfn(classes : String? = null, block : DFN.() -> Unit = {}) : Unit = DFN(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.em(classes : String? = null, block : EM.() -> Unit = {}) : Unit = EM(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.i(classes : String? = null, block : I.() -> Unit = {}) : Unit = I(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.ins(classes : String? = null, block : INS.() -> Unit = {}) : Unit = INS(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.kbd(classes : String? = null, block : KBD.() -> Unit = {}) : Unit = KBD(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.map(name : String? = null, classes : String? = null, block : MAP.() -> Unit = {}) : Unit = MAP(attributesMapOf(\"name\", name,\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.mark(classes : String? = null, block : MARK.() -> Unit = {}) : Unit = MARK(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.math(classes : String? = null, block : MATH.() -> Unit = {}) : Unit = MATH(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.meter(classes : String? = null, block : METER.() -> Unit = {}) : Unit = METER(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.output(classes : String? = null, block : OUTPUT.() -> Unit = {}) : Unit = OUTPUT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.progress(classes : String? = null, block : PROGRESS.() -> Unit = {}) : Unit = PROGRESS(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.q(classes : String? = null, block : Q.() -> Unit = {}) : Unit = Q(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.ruby(classes : String? = null, block : RUBY.() -> Unit = {}) : Unit = RUBY(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.samp(classes : String? = null, block : SAMP.() -> Unit = {}) : Unit = SAMP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.small(classes : String? = null, block : SMALL.() -> Unit = {}) : Unit = SMALL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.span(classes : String? = null, block : SPAN.() -> Unit = {}) : Unit = SPAN(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.strong(classes : String? = null, block : STRONG.() -> Unit = {}) : Unit = STRONG(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.sub(classes : String? = null, block : SUB.() -> Unit = {}) : Unit = SUB(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.sup(classes : String? = null, block : SUP.() -> Unit = {}) : Unit = SUP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.svg(classes : String? = null, block : SVG.() -> Unit = {}) : Unit = SVG(attributesMapOf(\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingContent.svg(classes : String? = null, content : String = \"\") : Unit = SVG(attributesMapOf(\"class\", classes), consumer).visit({+content})\n\nfun FlowOrPhrasingContent.time(classes : String? = null, block : TIME.() -> Unit = {}) : Unit = TIME(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingContent.htmlVar(classes : String? = null, block : VAR.() -> Unit = {}) : Unit = VAR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\nfun FlowOrPhrasingOrMetaDataContent.command(type : CommandType? = null, classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingOrMetaDataContent.commandCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.command.realValue,\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingOrMetaDataContent.checkBoxCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.checkBox.realValue,\"class\", classes), consumer).visit(block)\nfun FlowOrPhrasingOrMetaDataContent.radioCommand(classes : String? = null, block : COMMAND.() -> Unit = {}) : Unit = COMMAND(attributesMapOf(\"type\", CommandType.radio.realValue,\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingOrMetaDataContent.link(href : String? = null, rel : String? = null, type : String? = null, block : LINK.() -> Unit = {}) : Unit = LINK(attributesMapOf(\"href\", href,\"rel\", rel,\"type\", type), consumer).visit(block)\n\nfun FlowOrPhrasingOrMetaDataContent.meta(name : String? = null, content : String? = null, charset : String? = null, block : META.() -> Unit = {}) : Unit = META(attributesMapOf(\"name\", name,\"content\", content,\"charset\", charset), consumer).visit(block)\n\nfun FlowOrPhrasingOrMetaDataContent.noScript(classes : String? = null, block : NOSCRIPT.() -> Unit = {}) : Unit = NOSCRIPT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrPhrasingOrMetaDataContent.script(type : String? = null, src : String? = null, block : SCRIPT.() -> Unit = {}) : Unit = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), consumer).visit(block)\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\nfun FlowOrPhrasingOrMetaDataContent.script(type : String? = null, src : String? = null, content : String = \"\") : Unit = SCRIPT(attributesMapOf(\"type\", type,\"src\", src), consumer).visit({+content})\n\n\nfun SectioningOrFlowContent.article(classes : String? = null, block : ARTICLE.() -> Unit = {}) : Unit = ARTICLE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun SectioningOrFlowContent.aside(classes : String? = null, block : ASIDE.() -> Unit = {}) : Unit = ASIDE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun SectioningOrFlowContent.nav(classes : String? = null, block : NAV.() -> Unit = {}) : Unit = NAV(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun SectioningOrFlowContent.section(classes : String? = null, block : SECTION.() -> Unit = {}) : Unit = SECTION(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\nfun FlowOrInteractiveOrPhrasingContent.a(href : String? = null, target : String? = null, classes : String? = null, block : A.() -> Unit = {}) : Unit = A(attributesMapOf(\"href\", href,\"target\", target,\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.audio(classes : String? = null, block : AUDIO.() -> Unit = {}) : Unit = AUDIO(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.button(formEncType : ButtonFormEncType? = null, formMethod : ButtonFormMethod? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.getButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.get.realValue,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.postButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.post.realValue,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.putButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.put.realValue,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.deleteButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.delete.realValue,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.patchButton(formEncType : ButtonFormEncType? = null, type : ButtonType? = null, classes : String? = null, block : BUTTON.() -> Unit = {}) : Unit = BUTTON(attributesMapOf(\"formenctype\", formEncType?.enumEncode(),\"formmethod\", ButtonFormMethod.patch.realValue,\"type\", type?.enumEncode(),\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.embed(classes : String? = null, block : EMBED.() -> Unit = {}) : Unit = EMBED(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.iframe(sandbox : IframeSandbox? = null, classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", sandbox?.enumEncode(),\"class\", classes), consumer).visit({+content})\nfun FlowOrInteractiveOrPhrasingContent.allowSameOriginIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowSameOrigin.realValue,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.allowFormSIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowFormS.realValue,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.allowScriptsIframe(classes : String? = null, block : IFRAME.() -> Unit = {}) : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowScripts.realValue,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.allowSameOriginIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowSameOrigin.realValue,\"class\", classes), consumer).visit({+content})\nfun FlowOrInteractiveOrPhrasingContent.allowFormSIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowFormS.realValue,\"class\", classes), consumer).visit({+content})\nfun FlowOrInteractiveOrPhrasingContent.allowScriptsIframe(classes : String? = null, content : String = \"\") : Unit = IFRAME(attributesMapOf(\"sandbox\", IframeSandbox.allowScripts.realValue,\"class\", classes), consumer).visit({+content})\n\nfun FlowOrInteractiveOrPhrasingContent.img(alt : String? = null, src : String? = null, classes : String? = null, block : IMG.() -> Unit = {}) : Unit = IMG(attributesMapOf(\"alt\", alt,\"src\", src,\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.input(type : InputType? = null, formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", type?.enumEncode(),\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.buttonInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.button.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.checkBoxInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.checkBox.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.colorInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.color.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.dateInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.date.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.dateTimeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.dateTime.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.dateTimeLocalInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.dateTimeLocal.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.emailInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.email.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.fileInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.file.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.hiddenInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.hidden.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.imageInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.image.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.monthInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.month.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.numberInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.number.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.passwordInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.password.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.radioInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.radio.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.rangeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.range.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.resetInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.reset.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.searchInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.search.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.submitInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.submit.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.textInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.text.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.telInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.tel.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.timeInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.time.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.urlInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.url.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.weekInput(formEncType : InputFormEncType? = null, formMethod : InputFormMethod? = null, name : String? = null, classes : String? = null, block : INPUT.() -> Unit = {}) : Unit = INPUT(attributesMapOf(\"type\", InputType.week.realValue,\"formenctype\", formEncType?.enumEncode(),\"formmethod\", formMethod?.enumEncode(),\"name\", name,\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.keyGen(keyType : KeyGenKeyType? = null, classes : String? = null, block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf(\"keytype\", keyType?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.rsaKeyGen(classes : String? = null, block : KEYGEN.() -> Unit = {}) : Unit = KEYGEN(attributesMapOf(\"keytype\", KeyGenKeyType.rsa.realValue,\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.label(classes : String? = null, block : LABEL.() -> Unit = {}) : Unit = LABEL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.htmlObject(classes : String? = null, block : OBJECT.() -> Unit = {}) : Unit = OBJECT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.select(classes : String? = null, block : SELECT.() -> Unit = {}) : Unit = SELECT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FlowOrInteractiveOrPhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.textArea(rows : String? = null, cols : String? = null, wrap : TextAreaWrap? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", wrap?.enumEncode(),\"class\", classes), consumer).visit({+content})\nfun FlowOrInteractiveOrPhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.hard.realValue,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, block : TEXTAREA.() -> Unit = {}) : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.soft.realValue,\"class\", classes), consumer).visit(block)\nfun FlowOrInteractiveOrPhrasingContent.hardTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.hard.realValue,\"class\", classes), consumer).visit({+content})\nfun FlowOrInteractiveOrPhrasingContent.softTextArea(rows : String? = null, cols : String? = null, classes : String? = null, content : String = \"\") : Unit = TEXTAREA(attributesMapOf(\"rows\", rows,\"cols\", cols,\"wrap\", TextAreaWrap.soft.realValue,\"class\", classes), consumer).visit({+content})\n\nfun FlowOrInteractiveOrPhrasingContent.video(classes : String? = null, block : VIDEO.() -> Unit = {}) : Unit = VIDEO(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class A(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"a\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var href : String\n        get()  = attributeStringString.get(this, \"href\")\n        set(newValue) {attributeStringString.set(this, \"href\", newValue)}\n\n    var target : String\n        get()  = attributeStringString.get(this, \"target\")\n        set(newValue) {attributeStringString.set(this, \"target\", newValue)}\n\n    var ping : String\n        get()  = attributeStringString.get(this, \"ping\")\n        set(newValue) {attributeStringString.set(this, \"ping\", newValue)}\n\n    var rel : String\n        get()  = attributeStringString.get(this, \"rel\")\n        set(newValue) {attributeStringString.set(this, \"rel\", newValue)}\n\n    var hrefLang : String\n        get()  = attributeStringString.get(this, \"hreflang\")\n        set(newValue) {attributeStringString.set(this, \"hreflang\", newValue)}\n\n    var type : String\n        get()  = attributeStringString.get(this, \"type\")\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\n\n\n}\nval A.asFlowContent : FlowContent\n    get()  = this\n\nval A.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval A.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class ABBR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"abbr\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval ABBR.asFlowContent : FlowContent\n    get()  = this\n\nval ABBR.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class ADDRESS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"address\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class AREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"area\", consumer, initialAttributes, null, true, true), HtmlBlockInlineTag {\n    var coords : String\n        get()  = attributeStringString.get(this, \"coords\")\n        set(newValue) {attributeStringString.set(this, \"coords\", newValue)}\n\n    var href : String\n        get()  = attributeStringString.get(this, \"href\")\n        set(newValue) {attributeStringString.set(this, \"href\", newValue)}\n\n    var hrefLang : String\n        get()  = attributeStringString.get(this, \"hreflang\")\n        set(newValue) {attributeStringString.set(this, \"hreflang\", newValue)}\n\n    var alt : String\n        get()  = attributeStringString.get(this, \"alt\")\n        set(newValue) {attributeStringString.set(this, \"alt\", newValue)}\n\n    var target : String\n        get()  = attributeStringString.get(this, \"target\")\n        set(newValue) {attributeStringString.set(this, \"target\", newValue)}\n\n    var media : String\n        get()  = attributeStringString.get(this, \"media\")\n        set(newValue) {attributeStringString.set(this, \"media\", newValue)}\n\n    var rel : String\n        get()  = attributeStringString.get(this, \"rel\")\n        set(newValue) {attributeStringString.set(this, \"rel\", newValue)}\n\n    var ping : String\n        get()  = attributeStringString.get(this, \"ping\")\n        set(newValue) {attributeStringString.set(this, \"ping\", newValue)}\n\n    var type : String\n        get()  = attributeStringString.get(this, \"type\")\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\n\n\n}\nval AREA.asFlowContent : FlowContent\n    get()  = this\n\nval AREA.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class ARTICLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"article\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {\n\n}\nval ARTICLE.asFlowContent : FlowContent\n    get()  = this\n\nval ARTICLE.asSectioningContent : SectioningContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class ASIDE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"aside\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {\n\n}\nval ASIDE.asFlowContent : FlowContent\n    get()  = this\n\nval ASIDE.asSectioningContent : SectioningContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class AUDIO(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"audio\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var src : String\n        get()  = attributeStringString.get(this, \"src\")\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\n\n    var autoBuffer : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autobuffer\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autobuffer\", newValue)}\n\n    var autoPlay : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autoplay\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autoplay\", newValue)}\n\n    var loop : Boolean\n        get()  = attributeBooleanTicker.get(this, \"loop\")\n        set(newValue) {attributeBooleanTicker.set(this, \"loop\", newValue)}\n\n    var controls : Boolean\n        get()  = attributeBooleanTicker.get(this, \"controls\")\n        set(newValue) {attributeBooleanTicker.set(this, \"controls\", newValue)}\n\n\n}\nfun AUDIO.source(classes : String? = null, block : SOURCE.() -> Unit = {}) : Unit = SOURCE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nval AUDIO.asFlowContent : FlowContent\n    get()  = this\n\nval AUDIO.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval AUDIO.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class B(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"b\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval B.asFlowContent : FlowContent\n    get()  = this\n\nval B.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class BASE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"base\", consumer, initialAttributes, null, true, true), HtmlHeadTag {\n    var href : String\n        get()  = attributeStringString.get(this, \"href\")\n        set(newValue) {attributeStringString.set(this, \"href\", newValue)}\n\n    var target : String\n        get()  = attributeStringString.get(this, \"target\")\n        set(newValue) {attributeStringString.set(this, \"target\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class BDI(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"bdi\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval BDI.asFlowContent : FlowContent\n    get()  = this\n\nval BDI.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class BDO(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"bdo\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval BDO.asFlowContent : FlowContent\n    get()  = this\n\nval BDO.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class BLOCKQUOTE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"blockquote\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var cite : String\n        get()  = attributeStringString.get(this, \"cite\")\n        set(newValue) {attributeStringString.set(this, \"cite\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class BODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"body\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var onAfterprint : String\n        get()  = attributeStringString.get(this, \"onafterprint\")\n        set(newValue) {attributeStringString.set(this, \"onafterprint\", newValue)}\n\n    var onBeforeprint : String\n        get()  = attributeStringString.get(this, \"onbeforeprint\")\n        set(newValue) {attributeStringString.set(this, \"onbeforeprint\", newValue)}\n\n    var onBeforeunLoad : String\n        get()  = attributeStringString.get(this, \"onbeforeunload\")\n        set(newValue) {attributeStringString.set(this, \"onbeforeunload\", newValue)}\n\n    var onHashChange : String\n        get()  = attributeStringString.get(this, \"onhashchange\")\n        set(newValue) {attributeStringString.set(this, \"onhashchange\", newValue)}\n\n    var onMessage : String\n        get()  = attributeStringString.get(this, \"onmessage\")\n        set(newValue) {attributeStringString.set(this, \"onmessage\", newValue)}\n\n    var onOffline : String\n        get()  = attributeStringString.get(this, \"onoffline\")\n        set(newValue) {attributeStringString.set(this, \"onoffline\", newValue)}\n\n    var onOnline : String\n        get()  = attributeStringString.get(this, \"ononline\")\n        set(newValue) {attributeStringString.set(this, \"ononline\", newValue)}\n\n    var onPopstate : String\n        get()  = attributeStringString.get(this, \"onpopstate\")\n        set(newValue) {attributeStringString.set(this, \"onpopstate\", newValue)}\n\n    var onRedo : String\n        get()  = attributeStringString.get(this, \"onredo\")\n        set(newValue) {attributeStringString.set(this, \"onredo\", newValue)}\n\n    var onResize : String\n        get()  = attributeStringString.get(this, \"onresize\")\n        set(newValue) {attributeStringString.set(this, \"onresize\", newValue)}\n\n    var onStorage : String\n        get()  = attributeStringString.get(this, \"onstorage\")\n        set(newValue) {attributeStringString.set(this, \"onstorage\", newValue)}\n\n    var onUndo : String\n        get()  = attributeStringString.get(this, \"onundo\")\n        set(newValue) {attributeStringString.set(this, \"onundo\", newValue)}\n\n    var onUnLoad : String\n        get()  = attributeStringString.get(this, \"onunload\")\n        set(newValue) {attributeStringString.set(this, \"onunload\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class BR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"br\", consumer, initialAttributes, null, true, true), HtmlBlockInlineTag {\n\n}\nval BR.asFlowContent : FlowContent\n    get()  = this\n\nval BR.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class BUTTON(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"button\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var autoFocus : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\n\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var formAction : String\n        get()  = attributeStringString.get(this, \"formaction\")\n        set(newValue) {attributeStringString.set(this, \"formaction\", newValue)}\n\n    var formEncType : ButtonFormEncType\n        get()  = attributeButtonFormEncTypeEnumButtonFormEncTypeValues.get(this, \"formenctype\")\n        set(newValue) {attributeButtonFormEncTypeEnumButtonFormEncTypeValues.set(this, \"formenctype\", newValue)}\n\n    var formMethod : ButtonFormMethod\n        get()  = attributeButtonFormMethodEnumButtonFormMethodValues.get(this, \"formmethod\")\n        set(newValue) {attributeButtonFormMethodEnumButtonFormMethodValues.set(this, \"formmethod\", newValue)}\n\n    var formNovalidate : Boolean\n        get()  = attributeBooleanTicker.get(this, \"formnovalidate\")\n        set(newValue) {attributeBooleanTicker.set(this, \"formnovalidate\", newValue)}\n\n    var formTarget : String\n        get()  = attributeStringString.get(this, \"formtarget\")\n        set(newValue) {attributeStringString.set(this, \"formtarget\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var value : String\n        get()  = attributeStringString.get(this, \"value\")\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\n\n    var type : ButtonType\n        get()  = attributeButtonTypeEnumButtonTypeValues.get(this, \"type\")\n        set(newValue) {attributeButtonTypeEnumButtonTypeValues.set(this, \"type\", newValue)}\n\n\n}\nval BUTTON.asFlowContent : FlowContent\n    get()  = this\n\nval BUTTON.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval BUTTON.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class CANVAS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"canvas\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\n    var width : String\n        get()  = attributeStringString.get(this, \"width\")\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\n\n    var height : String\n        get()  = attributeStringString.get(this, \"height\")\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\n\n\n}\nval CANVAS.asFlowContent : FlowContent\n    get()  = this\n\nval CANVAS.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class CAPTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"caption\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class CITE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"cite\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval CITE.asFlowContent : FlowContent\n    get()  = this\n\nval CITE.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class CODE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"code\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval CODE.asFlowContent : FlowContent\n    get()  = this\n\nval CODE.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class COL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"col\", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacade {\n    var span : String\n        get()  = attributeStringString.get(this, \"span\")\n        set(newValue) {attributeStringString.set(this, \"span\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class COLGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"colgroup\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n    var span : String\n        get()  = attributeStringString.get(this, \"span\")\n        set(newValue) {attributeStringString.set(this, \"span\", newValue)}\n\n\n}\nfun COLGROUP.col(classes : String? = null, block : COL.() -> Unit = {}) : Unit = COL(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class COMMAND(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"command\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {\n    var type : CommandType\n        get()  = attributeCommandTypeEnumCommandTypeValues.get(this, \"type\")\n        set(newValue) {attributeCommandTypeEnumCommandTypeValues.set(this, \"type\", newValue)}\n\n    var label : String\n        get()  = attributeStringString.get(this, \"label\")\n        set(newValue) {attributeStringString.set(this, \"label\", newValue)}\n\n    var icon : String\n        get()  = attributeStringString.get(this, \"icon\")\n        set(newValue) {attributeStringString.set(this, \"icon\", newValue)}\n\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var checked : Boolean\n        get()  = attributeBooleanTicker.get(this, \"checked\")\n        set(newValue) {attributeBooleanTicker.set(this, \"checked\", newValue)}\n\n    var radioGroup : String\n        get()  = attributeStringString.get(this, \"radiogroup\")\n        set(newValue) {attributeStringString.set(this, \"radiogroup\", newValue)}\n\n\n}\nval COMMAND.asFlowContent : FlowContent\n    get()  = this\n\nval COMMAND.asMetaDataContent : MetaDataContent\n    get()  = this\n\nval COMMAND.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class DATALIST(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"datalist\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nfun DATALIST.option(classes : String? = null, block : OPTION.() -> Unit = {}) : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\nfun DATALIST.option(classes : String? = null, content : String = \"\") : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit({+content})\n\nval DATALIST.asFlowContent : FlowContent\n    get()  = this\n\nval DATALIST.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class DD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dd\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class DEL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"del\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\n    var cite : String\n        get()  = attributeStringString.get(this, \"cite\")\n        set(newValue) {attributeStringString.set(this, \"cite\", newValue)}\n\n    var dateTime : String\n        get()  = attributeStringString.get(this, \"datetime\")\n        set(newValue) {attributeStringString.set(this, \"datetime\", newValue)}\n\n\n}\nval DEL.asFlowContent : FlowContent\n    get()  = this\n\nval DEL.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class DETAILS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"details\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowInteractiveContent {\n    var open : Boolean\n        get()  = attributeBooleanTicker.get(this, \"open\")\n        set(newValue) {attributeBooleanTicker.set(this, \"open\", newValue)}\n\n\n}\nfun DETAILS.legend(classes : String? = null, block : LEGEND.() -> Unit = {}) : Unit = LEGEND(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nval DETAILS.asFlowContent : FlowContent\n    get()  = this\n\nval DETAILS.asInteractiveContent : InteractiveContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class DFN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dfn\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval DFN.asFlowContent : FlowContent\n    get()  = this\n\nval DFN.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class DIALOG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dialog\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class DIV(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"div\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class DL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dl\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\nfun DL.dd(classes : String? = null, block : DD.() -> Unit = {}) : Unit = DD(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun DL.dt(classes : String? = null, block : DT.() -> Unit = {}) : Unit = DT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class DT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"dt\", consumer, initialAttributes, null, false, false), HtmlInlineTag {\n\n}\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class EM(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"em\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval EM.asFlowContent : FlowContent\n    get()  = this\n\nval EM.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class EMBED(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"embed\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var src : String\n        get()  = attributeStringString.get(this, \"src\")\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\n\n    var height : String\n        get()  = attributeStringString.get(this, \"height\")\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\n\n    var width : String\n        get()  = attributeStringString.get(this, \"width\")\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\n\n    var type : String\n        get()  = attributeStringString.get(this, \"type\")\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\n\n\n}\nval EMBED.asFlowContent : FlowContent\n    get()  = this\n\nval EMBED.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval EMBED.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class FIELDSET(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"fieldset\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n\n}\nfun FIELDSET.legend(classes : String? = null, block : LEGEND.() -> Unit = {}) : Unit = LEGEND(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class FIGCAPTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"figcaption\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class FIGURE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"figure\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\nfun FIGURE.legend(classes : String? = null, block : LEGEND.() -> Unit = {}) : Unit = LEGEND(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun FIGURE.figcaption(classes : String? = null, block : FIGCAPTION.() -> Unit = {}) : Unit = FIGCAPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class FOOTER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"footer\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class FORM(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"form\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var acceptCharset : String\n        get()  = attributeStringString.get(this, \"accept-charset\")\n        set(newValue) {attributeStringString.set(this, \"accept-charset\", newValue)}\n\n    var action : String\n        get()  = attributeStringString.get(this, \"action\")\n        set(newValue) {attributeStringString.set(this, \"action\", newValue)}\n\n    var autoComplete : Boolean\n        get()  = attributeBooleanBooleanOnOff.get(this, \"autocomplete\")\n        set(newValue) {attributeBooleanBooleanOnOff.set(this, \"autocomplete\", newValue)}\n\n    var encType : FormEncType\n        get()  = attributeFormEncTypeEnumFormEncTypeValues.get(this, \"enctype\")\n        set(newValue) {attributeFormEncTypeEnumFormEncTypeValues.set(this, \"enctype\", newValue)}\n\n    var method : FormMethod\n        get()  = attributeFormMethodEnumFormMethodValues.get(this, \"method\")\n        set(newValue) {attributeFormMethodEnumFormMethodValues.set(this, \"method\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var novalidate : Boolean\n        get()  = attributeBooleanTicker.get(this, \"novalidate\")\n        set(newValue) {attributeBooleanTicker.set(this, \"novalidate\", newValue)}\n\n    var target : String\n        get()  = attributeStringString.get(this, \"target\")\n        set(newValue) {attributeStringString.set(this, \"target\", newValue)}\n\n\n}\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class H1(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h1\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H2(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h2\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H3(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h3\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H4(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h4\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H5(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h5\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class H6(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"h6\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingPhrasingContent {\n\n}\n\n@Suppress(\"unused\")\nopen class HEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"head\", consumer, initialAttributes, null, false, false), HtmlHeadTag {\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun Entities.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") entity(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun String.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") text(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(s : String) : Unit {\n        super<HTMLTag>.text(s)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(n : Number) : Unit {\n        super<HTMLTag>.text(n)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun entity(e : Entities) : Unit {\n        super<HTMLTag>.entity(e)\n    }\n\n}\n\n@Suppress(\"unused\")\nopen class HEADER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"header\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class HGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"hgroup\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowHeadingContent {\n\n}\nfun HGROUP.h1(classes : String? = null, block : H1.() -> Unit = {}) : Unit = H1(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun HGROUP.h2(classes : String? = null, block : H2.() -> Unit = {}) : Unit = H2(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun HGROUP.h3(classes : String? = null, block : H3.() -> Unit = {}) : Unit = H3(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun HGROUP.h4(classes : String? = null, block : H4.() -> Unit = {}) : Unit = H4(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun HGROUP.h5(classes : String? = null, block : H5.() -> Unit = {}) : Unit = H5(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun HGROUP.h6(classes : String? = null, block : H6.() -> Unit = {}) : Unit = H6(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nval HGROUP.asFlowContent : FlowContent\n    get()  = this\n\nval HGROUP.asHeadingContent : HeadingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class HR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"hr\", consumer, initialAttributes, null, false, true), HtmlBlockTag {\n\n}\n\n@Suppress(\"unused\")\nopen class HTML(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"html\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n    var manifest : String\n        get()  = attributeStringString.get(this, \"manifest\")\n        set(newValue) {attributeStringString.set(this, \"manifest\", newValue)}\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun Entities.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") entity(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun String.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") text(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(s : String) : Unit {\n        super<HTMLTag>.text(s)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(n : Number) : Unit {\n        super<HTMLTag>.text(n)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun entity(e : Entities) : Unit {\n        super<HTMLTag>.entity(e)\n    }\n\n}\nfun HTML.body(classes : String? = null, block : BODY.() -> Unit = {}) : Unit = BODY(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun HTML.head(block : HEAD.() -> Unit = {}) : Unit = HEAD(emptyMap, consumer).visit(block)\n@Deprecated(\"This tag doesn't support content or requires unsafe (try unsafe {})\")\n@Suppress(\"DEPRECATION\")\nfun HTML.head(content : String = \"\") : Unit = HEAD(emptyMap, consumer).visit({+content})\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class I(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"i\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval I.asFlowContent : FlowContent\n    get()  = this\n\nval I.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class IFRAME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"iframe\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var src : String\n        get()  = attributeStringString.get(this, \"src\")\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\n\n    var height : String\n        get()  = attributeStringString.get(this, \"height\")\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\n\n    var width : String\n        get()  = attributeStringString.get(this, \"width\")\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\n\n    var sandbox : IframeSandbox\n        get()  = attributeIframeSandboxEnumIframeSandboxValues.get(this, \"sandbox\")\n        set(newValue) {attributeIframeSandboxEnumIframeSandboxValues.set(this, \"sandbox\", newValue)}\n\n    var seamless : Boolean\n        get()  = attributeBooleanTicker.get(this, \"seamless\")\n        set(newValue) {attributeBooleanTicker.set(this, \"seamless\", newValue)}\n\n\n}\nval IFRAME.asFlowContent : FlowContent\n    get()  = this\n\nval IFRAME.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval IFRAME.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class IMG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"img\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var alt : String\n        get()  = attributeStringString.get(this, \"alt\")\n        set(newValue) {attributeStringString.set(this, \"alt\", newValue)}\n\n    var src : String\n        get()  = attributeStringString.get(this, \"src\")\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\n\n    var height : String\n        get()  = attributeStringString.get(this, \"height\")\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\n\n    var width : String\n        get()  = attributeStringString.get(this, \"width\")\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\n\n    var usemap : String\n        get()  = attributeStringString.get(this, \"usemap\")\n        set(newValue) {attributeStringString.set(this, \"usemap\", newValue)}\n\n    var ismap : Boolean\n        get()  = attributeBooleanTicker.get(this, \"ismap\")\n        set(newValue) {attributeBooleanTicker.set(this, \"ismap\", newValue)}\n\n\n}\nval IMG.asFlowContent : FlowContent\n    get()  = this\n\nval IMG.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval IMG.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class INPUT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"input\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var type : InputType\n        get()  = attributeInputTypeEnumInputTypeValues.get(this, \"type\")\n        set(newValue) {attributeInputTypeEnumInputTypeValues.set(this, \"type\", newValue)}\n\n    var accept : String\n        get()  = attributeStringString.get(this, \"accept\")\n        set(newValue) {attributeStringString.set(this, \"accept\", newValue)}\n\n    var alt : String\n        get()  = attributeStringString.get(this, \"alt\")\n        set(newValue) {attributeStringString.set(this, \"alt\", newValue)}\n\n    var autoFocus : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\n\n    var autoComplete : Boolean\n        get()  = attributeBooleanBooleanOnOff.get(this, \"autocomplete\")\n        set(newValue) {attributeBooleanBooleanOnOff.set(this, \"autocomplete\", newValue)}\n\n    var checked : Boolean\n        get()  = attributeBooleanTicker.get(this, \"checked\")\n        set(newValue) {attributeBooleanTicker.set(this, \"checked\", newValue)}\n\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var formAction : String\n        get()  = attributeStringString.get(this, \"formaction\")\n        set(newValue) {attributeStringString.set(this, \"formaction\", newValue)}\n\n    var formEncType : InputFormEncType\n        get()  = attributeInputFormEncTypeEnumInputFormEncTypeValues.get(this, \"formenctype\")\n        set(newValue) {attributeInputFormEncTypeEnumInputFormEncTypeValues.set(this, \"formenctype\", newValue)}\n\n    var formMethod : InputFormMethod\n        get()  = attributeInputFormMethodEnumInputFormMethodValues.get(this, \"formmethod\")\n        set(newValue) {attributeInputFormMethodEnumInputFormMethodValues.set(this, \"formmethod\", newValue)}\n\n    var formNovalidate : Boolean\n        get()  = attributeBooleanTicker.get(this, \"formnovalidate\")\n        set(newValue) {attributeBooleanTicker.set(this, \"formnovalidate\", newValue)}\n\n    var formTarget : String\n        get()  = attributeStringString.get(this, \"formtarget\")\n        set(newValue) {attributeStringString.set(this, \"formtarget\", newValue)}\n\n    var height : String\n        get()  = attributeStringString.get(this, \"height\")\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\n\n    var list : String\n        get()  = attributeStringString.get(this, \"list\")\n        set(newValue) {attributeStringString.set(this, \"list\", newValue)}\n\n    var max : String\n        get()  = attributeStringString.get(this, \"max\")\n        set(newValue) {attributeStringString.set(this, \"max\", newValue)}\n\n    var maxLength : String\n        get()  = attributeStringString.get(this, \"maxlength\")\n        set(newValue) {attributeStringString.set(this, \"maxlength\", newValue)}\n\n    var minLength : String\n        get()  = attributeStringString.get(this, \"minlength\")\n        set(newValue) {attributeStringString.set(this, \"minlength\", newValue)}\n\n    var min : String\n        get()  = attributeStringString.get(this, \"min\")\n        set(newValue) {attributeStringString.set(this, \"min\", newValue)}\n\n    var multiple : Boolean\n        get()  = attributeBooleanTicker.get(this, \"multiple\")\n        set(newValue) {attributeBooleanTicker.set(this, \"multiple\", newValue)}\n\n    var pattern : String\n        get()  = attributeStringString.get(this, \"pattern\")\n        set(newValue) {attributeStringString.set(this, \"pattern\", newValue)}\n\n    var placeholder : String\n        get()  = attributeStringString.get(this, \"placeholder\")\n        set(newValue) {attributeStringString.set(this, \"placeholder\", newValue)}\n\n    var readonly : Boolean\n        get()  = attributeBooleanTicker.get(this, \"readonly\")\n        set(newValue) {attributeBooleanTicker.set(this, \"readonly\", newValue)}\n\n    var required : Boolean\n        get()  = attributeBooleanTicker.get(this, \"required\")\n        set(newValue) {attributeBooleanTicker.set(this, \"required\", newValue)}\n\n    var size : String\n        get()  = attributeStringString.get(this, \"size\")\n        set(newValue) {attributeStringString.set(this, \"size\", newValue)}\n\n    var src : String\n        get()  = attributeStringString.get(this, \"src\")\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\n\n    var step : String\n        get()  = attributeStringString.get(this, \"step\")\n        set(newValue) {attributeStringString.set(this, \"step\", newValue)}\n\n    var width : String\n        get()  = attributeStringString.get(this, \"width\")\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\n\n    var files : String\n        get()  = attributeStringString.get(this, \"files\")\n        set(newValue) {attributeStringString.set(this, \"files\", newValue)}\n\n    var value : String\n        get()  = attributeStringString.get(this, \"value\")\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n\n}\nval INPUT.asFlowContent : FlowContent\n    get()  = this\n\nval INPUT.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval INPUT.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class INS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"ins\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\n    var cite : String\n        get()  = attributeStringString.get(this, \"cite\")\n        set(newValue) {attributeStringString.set(this, \"cite\", newValue)}\n\n    var dateTime : String\n        get()  = attributeStringString.get(this, \"datetime\")\n        set(newValue) {attributeStringString.set(this, \"datetime\", newValue)}\n\n\n}\nval INS.asFlowContent : FlowContent\n    get()  = this\n\nval INS.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class KBD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"kbd\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval KBD.asFlowContent : FlowContent\n    get()  = this\n\nval KBD.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class KEYGEN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"keygen\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var autoFocus : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\n\n    var challenge : String\n        get()  = attributeStringString.get(this, \"challenge\")\n        set(newValue) {attributeStringString.set(this, \"challenge\", newValue)}\n\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var keyType : KeyGenKeyType\n        get()  = attributeKeyGenKeyTypeEnumKeyGenKeyTypeValues.get(this, \"keytype\")\n        set(newValue) {attributeKeyGenKeyTypeEnumKeyGenKeyTypeValues.set(this, \"keytype\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n\n}\nval KEYGEN.asFlowContent : FlowContent\n    get()  = this\n\nval KEYGEN.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval KEYGEN.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class LABEL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"label\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var htmlFor : String\n        get()  = attributeStringString.get(this, \"for\")\n        set(newValue) {attributeStringString.set(this, \"for\", newValue)}\n\n\n}\nval LABEL.asFlowContent : FlowContent\n    get()  = this\n\nval LABEL.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval LABEL.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class LEGEND(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"legend\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval LEGEND.asFlowContent : FlowContent\n    get()  = this\n\nval LEGEND.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class LI(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"li\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var value : String\n        get()  = attributeStringString.get(this, \"value\")\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class LINK(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"link\", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {\n    var href : String\n        get()  = attributeStringString.get(this, \"href\")\n        set(newValue) {attributeStringString.set(this, \"href\", newValue)}\n\n    var hrefLang : String\n        get()  = attributeStringString.get(this, \"hreflang\")\n        set(newValue) {attributeStringString.set(this, \"hreflang\", newValue)}\n\n    var rel : String\n        get()  = attributeStringString.get(this, \"rel\")\n        set(newValue) {attributeStringString.set(this, \"rel\", newValue)}\n\n    var media : String\n        get()  = attributeStringString.get(this, \"media\")\n        set(newValue) {attributeStringString.set(this, \"media\", newValue)}\n\n    var type : String\n        get()  = attributeStringString.get(this, \"type\")\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\n\n    var sizes : String\n        get()  = attributeStringString.get(this, \"sizes\")\n        set(newValue) {attributeStringString.set(this, \"sizes\", newValue)}\n\n\n}\nval LINK.asFlowContent : FlowContent\n    get()  = this\n\nval LINK.asMetaDataContent : MetaDataContent\n    get()  = this\n\nval LINK.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class MAP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"map\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n\n}\nval MAP.asFlowContent : FlowContent\n    get()  = this\n\nval MAP.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class MARK(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"mark\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval MARK.asFlowContent : FlowContent\n    get()  = this\n\nval MARK.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class MATH(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"math\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\n\n}\nval MATH.asFlowContent : FlowContent\n    get()  = this\n\nval MATH.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class MATHML(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"mathml\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\n\n@Suppress(\"unused\")\nopen class META(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"meta\", consumer, initialAttributes, null, false, true), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {\n    var httpEquiv : String\n        get()  = attributeStringString.get(this, \"http-equiv\")\n        set(newValue) {attributeStringString.set(this, \"http-equiv\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var content : String\n        get()  = attributeStringString.get(this, \"content\")\n        set(newValue) {attributeStringString.set(this, \"content\", newValue)}\n\n    var charset : String\n        get()  = attributeStringString.get(this, \"charset\")\n        set(newValue) {attributeStringString.set(this, \"charset\", newValue)}\n\n\n}\nval META.asFlowContent : FlowContent\n    get()  = this\n\nval META.asMetaDataContent : MetaDataContent\n    get()  = this\n\nval META.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class METER(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"meter\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n    var value : String\n        get()  = attributeStringString.get(this, \"value\")\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\n\n    var min : String\n        get()  = attributeStringString.get(this, \"min\")\n        set(newValue) {attributeStringString.set(this, \"min\", newValue)}\n\n    var max : String\n        get()  = attributeStringString.get(this, \"max\")\n        set(newValue) {attributeStringString.set(this, \"max\", newValue)}\n\n    var low : String\n        get()  = attributeStringString.get(this, \"low\")\n        set(newValue) {attributeStringString.set(this, \"low\", newValue)}\n\n    var high : String\n        get()  = attributeStringString.get(this, \"high\")\n        set(newValue) {attributeStringString.set(this, \"high\", newValue)}\n\n    var optimum : String\n        get()  = attributeStringString.get(this, \"optimum\")\n        set(newValue) {attributeStringString.set(this, \"optimum\", newValue)}\n\n\n}\nval METER.asFlowContent : FlowContent\n    get()  = this\n\nval METER.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class NAV(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"nav\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {\n\n}\nval NAV.asFlowContent : FlowContent\n    get()  = this\n\nval NAV.asSectioningContent : SectioningContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class NOSCRIPT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"noscript\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowMetaDataPhrasingContent {\n\n}\nval NOSCRIPT.asFlowContent : FlowContent\n    get()  = this\n\nval NOSCRIPT.asMetaDataContent : MetaDataContent\n    get()  = this\n\nval NOSCRIPT.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class OBJECT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"object\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var data : String\n        get()  = attributeStringString.get(this, \"data\")\n        set(newValue) {attributeStringString.set(this, \"data\", newValue)}\n\n    var type : String\n        get()  = attributeStringString.get(this, \"type\")\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\n\n    var height : String\n        get()  = attributeStringString.get(this, \"height\")\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\n\n    var width : String\n        get()  = attributeStringString.get(this, \"width\")\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\n\n    var usemap : String\n        get()  = attributeStringString.get(this, \"usemap\")\n        set(newValue) {attributeStringString.set(this, \"usemap\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var classId : String\n        get()  = attributeStringString.get(this, \"classid\")\n        set(newValue) {attributeStringString.set(this, \"classid\", newValue)}\n\n\n}\nfun OBJECT.param(name : String? = null, value : String? = null, block : PARAM.() -> Unit = {}) : Unit = PARAM(attributesMapOf(\"name\", name,\"value\", value), consumer).visit(block)\n\nval OBJECT.asFlowContent : FlowContent\n    get()  = this\n\nval OBJECT.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval OBJECT.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class OL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"ol\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var start : String\n        get()  = attributeStringString.get(this, \"start\")\n        set(newValue) {attributeStringString.set(this, \"start\", newValue)}\n\n    var reversed : Boolean\n        get()  = attributeBooleanTicker.get(this, \"reversed\")\n        set(newValue) {attributeBooleanTicker.set(this, \"reversed\", newValue)}\n\n\n}\nfun OL.li(classes : String? = null, block : LI.() -> Unit = {}) : Unit = LI(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class OPTGROUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"optgroup\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacade {\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var label : String\n        get()  = attributeStringString.get(this, \"label\")\n        set(newValue) {attributeStringString.set(this, \"label\", newValue)}\n\n\n}\nfun OPTGROUP.option(classes : String? = null, block : OPTION.() -> Unit = {}) : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\nfun OPTGROUP.option(classes : String? = null, content : String = \"\") : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit({+content})\n\n\n@Suppress(\"unused\")\nopen class OPTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"option\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacade {\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var selected : Boolean\n        get()  = attributeBooleanTicker.get(this, \"selected\")\n        set(newValue) {attributeBooleanTicker.set(this, \"selected\", newValue)}\n\n    var label : String\n        get()  = attributeStringString.get(this, \"label\")\n        set(newValue) {attributeStringString.set(this, \"label\", newValue)}\n\n    var value : String\n        get()  = attributeStringString.get(this, \"value\")\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class OUTPUT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"output\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n    var htmlFor : String\n        get()  = attributeStringString.get(this, \"for\")\n        set(newValue) {attributeStringString.set(this, \"for\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n\n}\nval OUTPUT.asFlowContent : FlowContent\n    get()  = this\n\nval OUTPUT.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class P(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"p\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\n\n}\nval P.asFlowContent : FlowContent\n    get()  = this\n\nval P.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class PARAM(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"param\", consumer, initialAttributes, null, true, true) {\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var value : String\n        get()  = attributeStringString.get(this, \"value\")\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class PRE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"pre\", consumer, initialAttributes, null, false, false), HtmlBlockInlineTag {\n\n}\nval PRE.asFlowContent : FlowContent\n    get()  = this\n\nval PRE.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class PROGRESS(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"progress\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n    var value : String\n        get()  = attributeStringString.get(this, \"value\")\n        set(newValue) {attributeStringString.set(this, \"value\", newValue)}\n\n    var max : String\n        get()  = attributeStringString.get(this, \"max\")\n        set(newValue) {attributeStringString.set(this, \"max\", newValue)}\n\n\n}\nval PROGRESS.asFlowContent : FlowContent\n    get()  = this\n\nval PROGRESS.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class Q(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"q\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n    var cite : String\n        get()  = attributeStringString.get(this, \"cite\")\n        set(newValue) {attributeStringString.set(this, \"cite\", newValue)}\n\n\n}\nval Q.asFlowContent : FlowContent\n    get()  = this\n\nval Q.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class RP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"rp\", consumer, initialAttributes, null, true, false), HtmlInlineTag {\n\n}\n\n@Suppress(\"unused\")\nopen class RT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"rt\", consumer, initialAttributes, null, true, false), HtmlInlineTag {\n\n}\n\n@Suppress(\"unused\")\nopen class RUBY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"ruby\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nfun RUBY.rt(classes : String? = null, block : RT.() -> Unit = {}) : Unit = RT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun RUBY.rp(classes : String? = null, block : RP.() -> Unit = {}) : Unit = RP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nval RUBY.asFlowContent : FlowContent\n    get()  = this\n\nval RUBY.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class SAMP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"samp\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval SAMP.asFlowContent : FlowContent\n    get()  = this\n\nval SAMP.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class SCRIPT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"script\", consumer, initialAttributes, null, false, false), FlowMetaDataPhrasingContent {\n    var charset : String\n        get()  = attributeStringString.get(this, \"charset\")\n        set(newValue) {attributeStringString.set(this, \"charset\", newValue)}\n\n    var type : String\n        get()  = attributeStringString.get(this, \"type\")\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\n\n    var src : String\n        get()  = attributeStringString.get(this, \"src\")\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\n\n    var defer : Boolean\n        get()  = attributeBooleanTicker.get(this, \"defer\")\n        set(newValue) {attributeBooleanTicker.set(this, \"defer\", newValue)}\n\n    var async : Boolean\n        get()  = attributeBooleanTicker.get(this, \"async\")\n        set(newValue) {attributeBooleanTicker.set(this, \"async\", newValue)}\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun Entities.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") entity(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun String.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") text(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(s : String) : Unit {\n        super<HTMLTag>.text(s)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(n : Number) : Unit {\n        super<HTMLTag>.text(n)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun entity(e : Entities) : Unit {\n        super<HTMLTag>.entity(e)\n    }\n\n}\nval SCRIPT.asFlowContent : FlowContent\n    get()  = this\n\nval SCRIPT.asMetaDataContent : MetaDataContent\n    get()  = this\n\nval SCRIPT.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class SECTION(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"section\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowSectioningContent {\n\n}\nval SECTION.asFlowContent : FlowContent\n    get()  = this\n\nval SECTION.asSectioningContent : SectioningContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class SELECT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"select\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var autoFocus : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\n\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var multiple : Boolean\n        get()  = attributeBooleanTicker.get(this, \"multiple\")\n        set(newValue) {attributeBooleanTicker.set(this, \"multiple\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var size : String\n        get()  = attributeStringString.get(this, \"size\")\n        set(newValue) {attributeStringString.set(this, \"size\", newValue)}\n\n    var required : Boolean\n        get()  = attributeBooleanTicker.get(this, \"required\")\n        set(newValue) {attributeBooleanTicker.set(this, \"required\", newValue)}\n\n\n}\nfun SELECT.option(classes : String? = null, block : OPTION.() -> Unit = {}) : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\nfun SELECT.option(classes : String? = null, content : String = \"\") : Unit = OPTION(attributesMapOf(\"class\", classes), consumer).visit({+content})\n\nfun SELECT.optGroup(label : String? = null, classes : String? = null, block : OPTGROUP.() -> Unit = {}) : Unit = OPTGROUP(attributesMapOf(\"label\", label,\"class\", classes), consumer).visit(block)\n\nval SELECT.asFlowContent : FlowContent\n    get()  = this\n\nval SELECT.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval SELECT.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class SMALL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"small\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval SMALL.asFlowContent : FlowContent\n    get()  = this\n\nval SMALL.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class SOURCE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"source\", consumer, initialAttributes, null, true, true), CommonAttributeGroupFacade {\n    var src : String\n        get()  = attributeStringString.get(this, \"src\")\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\n\n    var type : String\n        get()  = attributeStringString.get(this, \"type\")\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\n\n    var media : String\n        get()  = attributeStringString.get(this, \"media\")\n        set(newValue) {attributeStringString.set(this, \"media\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class SPAN(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"span\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval SPAN.asFlowContent : FlowContent\n    get()  = this\n\nval SPAN.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class STRONG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"strong\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval STRONG.asFlowContent : FlowContent\n    get()  = this\n\nval STRONG.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class STYLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"style\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowMetaDataContent {\n    var type : String\n        get()  = attributeStringString.get(this, \"type\")\n        set(newValue) {attributeStringString.set(this, \"type\", newValue)}\n\n    var media : String\n        get()  = attributeStringString.get(this, \"media\")\n        set(newValue) {attributeStringString.set(this, \"media\", newValue)}\n\n    var scoped : Boolean\n        get()  = attributeBooleanTicker.get(this, \"scoped\")\n        set(newValue) {attributeBooleanTicker.set(this, \"scoped\", newValue)}\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun Entities.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") entity(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override operator fun String.unaryPlus() : Unit {\n        @Suppress(\"DEPRECATION\") text(this)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(s : String) : Unit {\n        super<HTMLTag>.text(s)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun text(n : Number) : Unit {\n        super<HTMLTag>.text(n)\n    }\n\n    @Deprecated(\"This tag most likely doesn't support text content or requires unsafe content (try unsafe {}\")\n    override fun entity(e : Entities) : Unit {\n        super<HTMLTag>.entity(e)\n    }\n\n}\nval STYLE.asFlowContent : FlowContent\n    get()  = this\n\nval STYLE.asMetaDataContent : MetaDataContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class SUB(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"sub\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval SUB.asFlowContent : FlowContent\n    get()  = this\n\nval SUB.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class SUP(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"sup\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval SUP.asFlowContent : FlowContent\n    get()  = this\n\nval SUP.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class SVG(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"svg\", consumer, initialAttributes, \"http://www.w3.org/2000/svg\", false, false), HtmlBlockInlineTag {\n\n}\nval SVG.asFlowContent : FlowContent\n    get()  = this\n\nval SVG.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class TABLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"table\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var summary : String\n        get()  = attributeStringString.get(this, \"summary\")\n        set(newValue) {attributeStringString.set(this, \"summary\", newValue)}\n\n\n}\nfun TABLE.caption(classes : String? = null, block : CAPTION.() -> Unit = {}) : Unit = CAPTION(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun TABLE.colGroup(classes : String? = null, block : COLGROUP.() -> Unit = {}) : Unit = COLGROUP(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun TABLE.thead(classes : String? = null, block : THEAD.() -> Unit = {}) : Unit = THEAD(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun TABLE.tfoot(classes : String? = null, block : TFOOT.() -> Unit = {}) : Unit = TFOOT(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun TABLE.tbody(classes : String? = null, block : TBODY.() -> Unit = {}) : Unit = TBODY(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nfun TABLE.tr(classes : String? = null, block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class TBODY(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tbody\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\nfun TBODY.tr(classes : String? = null, block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class TD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"td\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n    var headers : String\n        get()  = attributeStringString.get(this, \"headers\")\n        set(newValue) {attributeStringString.set(this, \"headers\", newValue)}\n\n    var rowSpan : String\n        get()  = attributeStringString.get(this, \"rowspan\")\n        set(newValue) {attributeStringString.set(this, \"rowspan\", newValue)}\n\n    var colSpan : String\n        get()  = attributeStringString.get(this, \"colspan\")\n        set(newValue) {attributeStringString.set(this, \"colspan\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class TEXTAREA(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"textarea\", consumer, initialAttributes, null, true, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var autoFocus : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autofocus\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autofocus\", newValue)}\n\n    var disabled : Boolean\n        get()  = attributeBooleanTicker.get(this, \"disabled\")\n        set(newValue) {attributeBooleanTicker.set(this, \"disabled\", newValue)}\n\n    var form : String\n        get()  = attributeStringString.get(this, \"form\")\n        set(newValue) {attributeStringString.set(this, \"form\", newValue)}\n\n    var maxLength : String\n        get()  = attributeStringString.get(this, \"maxlength\")\n        set(newValue) {attributeStringString.set(this, \"maxlength\", newValue)}\n\n    var minLength : String\n        get()  = attributeStringString.get(this, \"minlength\")\n        set(newValue) {attributeStringString.set(this, \"minlength\", newValue)}\n\n    var name : String\n        get()  = attributeStringString.get(this, \"name\")\n        set(newValue) {attributeStringString.set(this, \"name\", newValue)}\n\n    var placeholder : String\n        get()  = attributeStringString.get(this, \"placeholder\")\n        set(newValue) {attributeStringString.set(this, \"placeholder\", newValue)}\n\n    var readonly : Boolean\n        get()  = attributeBooleanTicker.get(this, \"readonly\")\n        set(newValue) {attributeBooleanTicker.set(this, \"readonly\", newValue)}\n\n    var required : Boolean\n        get()  = attributeBooleanTicker.get(this, \"required\")\n        set(newValue) {attributeBooleanTicker.set(this, \"required\", newValue)}\n\n    var rows : String\n        get()  = attributeStringString.get(this, \"rows\")\n        set(newValue) {attributeStringString.set(this, \"rows\", newValue)}\n\n    var cols : String\n        get()  = attributeStringString.get(this, \"cols\")\n        set(newValue) {attributeStringString.set(this, \"cols\", newValue)}\n\n    var wrap : TextAreaWrap\n        get()  = attributeTextAreaWrapEnumTextAreaWrapValues.get(this, \"wrap\")\n        set(newValue) {attributeTextAreaWrapEnumTextAreaWrapValues.set(this, \"wrap\", newValue)}\n\n\n}\nval TEXTAREA.asFlowContent : FlowContent\n    get()  = this\n\nval TEXTAREA.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval TEXTAREA.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class TFOOT(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tfoot\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\nfun TFOOT.tr(classes : String? = null, block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class TH(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"th\", consumer, initialAttributes, null, false, false), HtmlInlineTag {\n    var headers : String\n        get()  = attributeStringString.get(this, \"headers\")\n        set(newValue) {attributeStringString.set(this, \"headers\", newValue)}\n\n    var rowSpan : String\n        get()  = attributeStringString.get(this, \"rowspan\")\n        set(newValue) {attributeStringString.set(this, \"rowspan\", newValue)}\n\n    var colSpan : String\n        get()  = attributeStringString.get(this, \"colspan\")\n        set(newValue) {attributeStringString.set(this, \"colspan\", newValue)}\n\n    var scope : ThScope\n        get()  = attributeThScopeEnumThScopeValues.get(this, \"scope\")\n        set(newValue) {attributeThScopeEnumThScopeValues.set(this, \"scope\", newValue)}\n\n\n}\n\n@Suppress(\"unused\")\nopen class THEAD(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"thead\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\nfun THEAD.tr(classes : String? = null, block : TR.() -> Unit = {}) : Unit = TR(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n@Suppress(\"unused\")\nopen class TIME(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"time\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n    var dateTime : String\n        get()  = attributeStringString.get(this, \"datetime\")\n        set(newValue) {attributeStringString.set(this, \"datetime\", newValue)}\n\n\n}\nval TIME.asFlowContent : FlowContent\n    get()  = this\n\nval TIME.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class TITLE(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"title\", consumer, initialAttributes, null, false, false), HtmlHeadTag {\n\n}\n\n@Suppress(\"unused\")\nopen class TR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"tr\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacade {\n\n}\nfun TR.th(scope : ThScope? = null, classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", scope?.enumEncode(),\"class\", classes), consumer).visit(block)\nfun TR.colTh(classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.col.realValue,\"class\", classes), consumer).visit(block)\nfun TR.colGroupTh(classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.colGroup.realValue,\"class\", classes), consumer).visit(block)\nfun TR.rowTh(classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.row.realValue,\"class\", classes), consumer).visit(block)\nfun TR.rowGroupTh(classes : String? = null, block : TH.() -> Unit = {}) : Unit = TH(attributesMapOf(\"scope\", ThScope.rowGroup.realValue,\"class\", classes), consumer).visit(block)\n\nfun TR.td(classes : String? = null, block : TD.() -> Unit = {}) : Unit = TD(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class UL(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"ul\", consumer, initialAttributes, null, false, false), HtmlBlockTag {\n\n}\nfun UL.li(classes : String? = null, block : LI.() -> Unit = {}) : Unit = LI(attributesMapOf(\"class\", classes), consumer).visit(block)\n\n\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.impl.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\n@Suppress(\"unused\")\nopen class VAR(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"var\", consumer, initialAttributes, null, true, false), HtmlBlockInlineTag {\n\n}\nval VAR.asFlowContent : FlowContent\n    get()  = this\n\nval VAR.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n@Suppress(\"unused\")\nopen class VIDEO(initialAttributes : Map<String, String>, override val consumer : TagConsumer<*>) : HTMLTag(\"video\", consumer, initialAttributes, null, false, false), CommonAttributeGroupFacadeFlowInteractivePhrasingContent {\n    var src : String\n        get()  = attributeStringString.get(this, \"src\")\n        set(newValue) {attributeStringString.set(this, \"src\", newValue)}\n\n    var autoBuffer : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autobuffer\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autobuffer\", newValue)}\n\n    var autoPlay : Boolean\n        get()  = attributeBooleanTicker.get(this, \"autoplay\")\n        set(newValue) {attributeBooleanTicker.set(this, \"autoplay\", newValue)}\n\n    var loop : Boolean\n        get()  = attributeBooleanTicker.get(this, \"loop\")\n        set(newValue) {attributeBooleanTicker.set(this, \"loop\", newValue)}\n\n    var controls : Boolean\n        get()  = attributeBooleanTicker.get(this, \"controls\")\n        set(newValue) {attributeBooleanTicker.set(this, \"controls\", newValue)}\n\n    var width : String\n        get()  = attributeStringString.get(this, \"width\")\n        set(newValue) {attributeStringString.set(this, \"width\", newValue)}\n\n    var height : String\n        get()  = attributeStringString.get(this, \"height\")\n        set(newValue) {attributeStringString.set(this, \"height\", newValue)}\n\n    var poster : String\n        get()  = attributeStringString.get(this, \"poster\")\n        set(newValue) {attributeStringString.set(this, \"poster\", newValue)}\n\n\n}\nfun VIDEO.source(classes : String? = null, block : SOURCE.() -> Unit = {}) : Unit = SOURCE(attributesMapOf(\"class\", classes), consumer).visit(block)\n\nval VIDEO.asFlowContent : FlowContent\n    get()  = this\n\nval VIDEO.asInteractiveContent : InteractiveContent\n    get()  = this\n\nval VIDEO.asPhrasingContent : PhrasingContent\n    get()  = this\n\n\n","package kotlinx.html\n\nimport kotlinx.html.impl.*\n\nopen class HTMLTag(\n        override val tagName : String,\n        override val consumer : TagConsumer<*>,\n        initialAttributes : Map<String, String>,\n        override val namespace : String? = null,\n        override val inlineTag: Boolean,\n        override val emptyTag: Boolean) : Tag {\n\n    override val attributes : DelegatingMap = DelegatingMap(initialAttributes, this) { consumer }\n\n    override val attributesEntries: Collection<Map.Entry<String, String>>\n        get() = attributes.immutableEntries\n}\n","package kotlinx.html.consumers\n\nimport kotlinx.html.*\nimport org.w3c.dom.events.Event\n\ndata class TimedResult<T>(val result: T, val time: Long)\nval <O: Appendable> TimedResult<O>.out: O\n    get() = result\n\nprivate class TimeMeasureConsumer<R>(val downstream : TagConsumer<R>) : TagConsumer<TimedResult<R>> {\n    private val start = currentTimeMillis()\n\n    override fun onTagStart(tag: Tag) {\n        downstream.onTagStart(tag)\n    }\n\n    override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\n        downstream.onTagAttributeChange(tag, attribute, value)\n    }\n\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n        downstream.onTagEvent(tag, event, value)\n    }\n\n    override fun onTagEnd(tag: Tag) {\n        downstream.onTagEnd(tag)\n    }\n\n    override fun onTagContent(content: CharSequence) {\n        downstream.onTagContent(content)\n    }\n\n    override fun onTagContentEntity(entity: Entities) {\n        downstream.onTagContentEntity(entity)\n    }\n\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n        downstream.onTagContentUnsafe(block)\n    }\n\n    override fun onTagError(tag: Tag, exception: Throwable) {\n        downstream.onTagError(tag, exception)\n    }\n\n    override fun finalize(): TimedResult<R> = TimedResult(downstream.finalize(), currentTimeMillis() - start)\n}\n\nfun <R> TagConsumer<R>.measureTime() : TagConsumer<TimedResult<R>> = TimeMeasureConsumer(this)","package kotlinx.html.stream\n\nimport kotlinx.html.*\nimport kotlinx.html.consumers.*\nimport org.w3c.dom.events.Event\n\nclass HTMLStreamBuilder<out O : Appendable>(val out : O, val prettyPrint : Boolean) : TagConsumer<O> {\n    private var level = 0\n    private var ln = true\n\n    override fun onTagStart(tag: Tag) {\n        if (prettyPrint && !tag.inlineTag) {\n            indent()\n        }\n        level++\n\n        out.append(\"<\")\n        out.append(tag.tagName)\n\n        if (tag.namespace != null) {\n            out.append(\" xmlns=\\\"\")\n            out.append(tag.namespace)\n            out.append(\"\\\"\")\n        }\n\n        if (tag.attributes.isNotEmpty()) {\n            tag.attributesEntries.forEachIndexed { _, e ->\n                if (!e.key.isValidXmlAttributeName()) {\n                    throw IllegalArgumentException(\"Tag ${tag.tagName} has invalid attribute name ${e.key}\")\n                }\n\n                out.append(' ')\n                out.append(e.key)\n                out.append(\"=\\\"\")\n                out.escapeAppend(e.value)\n                out.append('\\\"')\n            }\n        }\n\n        out.append(\">\")\n        ln = false\n    }\n\n    override fun onTagAttributeChange(tag : Tag, attribute: String, value: String?) {\n        throw UnsupportedOperationException(\"tag attribute can't be changed as it was already written to the stream. Use with DelayedConsumer to be able to modify attributes\")\n    }\n\n    override fun onTagEvent(tag: Tag, event: String, value: (Event) -> Unit) {\n        throw UnsupportedOperationException(\"you can't assign lambda event handler when building text\")\n    }\n\n    override fun onTagEnd(tag: Tag) {\n        level--\n        if (ln) {\n            indent()\n        }\n\n        if (!tag.emptyTag) {\n            out.append(\"<\/\")\n            out.append(tag.tagName)\n            out.append(\">\")\n        }\n\n        if (prettyPrint && !tag.inlineTag) {\n            appenln()\n        }\n    }\n\n    override fun onTagContent(content: CharSequence) {\n        out.escapeAppend(content)\n        ln = false\n    }\n\n    override fun onTagContentEntity(entity: Entities) {\n        out.append(entity.text)\n        ln = false\n    }\n\n    override fun finalize(): O = out\n\n    override fun onTagContentUnsafe(block: Unsafe.() -> Unit) {\n        UnsafeImpl.block()\n    }\n\n    val UnsafeImpl = object : Unsafe {\n        override operator fun String.unaryPlus() {\n            out.append(this)\n        }\n    }\n\n    private fun appenln() {\n        if (prettyPrint && !ln) {\n            out.append(\"\\n\")\n            ln = true\n        }\n    }\n\n    private fun indent() {\n        if (prettyPrint) {\n            if (!ln) {\n                out.append(\"\\n\")\n            }\n            var remaining = level\n            while (remaining >= 4) {\n                out.append(\"        \")\n                remaining -= 4\n            }\n            while (remaining >= 2) {\n                out.append(\"    \")\n                remaining -= 2\n            }\n            if (remaining > 0) {\n                out.append(\"  \")\n            }\n            ln = false\n        }\n    }\n}\n\nprivate val AVERAGE_PAGE_SIZE = 32768\nfun createHTML(prettyPrint: Boolean = true): TagConsumer<String> = HTMLStreamBuilder(StringBuilder(AVERAGE_PAGE_SIZE), prettyPrint).onFinalizeMap { sb, _ -> sb.toString() }.delayed()\nfun <O : Appendable> O.appendHTML(prettyPrint : Boolean = true) : TagConsumer<O> = HTMLStreamBuilder(this, prettyPrint).delayed()\n\nprivate val escapeMap = mapOf(\n        '<' to \"&lt;\",\n        '>' to \"&gt;\",\n        '&' to \"&amp;\",\n        '\\\"' to \"&quot;\"\n).let { mappings ->\n    val maxCode = mappings.keys.map { it.toInt() }.max() ?: -1\n\n    Array(maxCode + 1) { mappings[it.toChar()] }\n}\n\nprivate val letterRangeLowerCase = 'a' .. 'z'\nprivate val letterRangeUpperCase = 'A' .. 'Z'\nprivate val digitRange = '0' .. '9'\n\nprivate fun Char._isLetter() = this in letterRangeLowerCase || this in letterRangeUpperCase\nprivate fun Char._isDigit() = this in digitRange\n\nprivate fun String.isValidXmlAttributeName() =\n        !startsWithXml()\n                && this.isNotEmpty()\n                && (this[0]._isLetter() || this[0] == '_')\n                && this.all { it._isLetter() || it._isDigit() || it in \"._:-\" }\n\nprivate fun String.startsWithXml() = length >= 3\n        && (this[0].let { it == 'x' || it == 'X' })\n        && (this[1].let { it == 'm' || it == 'M' })\n        && (this[2].let { it == 'l' || it == 'L' })\n\nprivate fun Appendable.escapeAppend(s : CharSequence) {\n    var lastIndex = 0\n    val mappings = escapeMap\n    val size = mappings.size\n\n    for (idx in 0 .. s.length - 1) {\n        val ch = s[idx].toInt()\n        if (ch < 0 || ch >= size) continue\n        val escape = mappings[ch]\n        if (escape != null) {\n            append(s.substring(lastIndex, idx))\n            append(escape)\n            lastIndex = idx + 1\n        }\n    }\n\n    if (lastIndex < s.length) {\n        append(s.substring(lastIndex, s.length))\n    }\n}",null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport kotlin.comparisons.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0..length - 1) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0..length - 1)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0..length - 1)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length)))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each character of the original char sequence.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the desired action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\npublic fun CharSequence.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n */\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\npublic fun CharSequence.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n */\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of pairs built from characters of both char sequences with same indexes. List has length of shortest char sequence.\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from characters of both char sequences with same indexes using provided [transform]. List has length of shortest char sequence.\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0..length-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","package kotlinx.html.consumers\n\nimport kotlinx.html.*\n\nclass TraceConsumer<R>(val downstream : TagConsumer<R>, val println: (String) -> Unit) : TagConsumer<R> by downstream {\n    private val id = \"ID-${currentTimeMillis() % 16384}\"\n    private val path = ArrayList<String>(1024)\n\n    override fun onTagStart(tag: Tag) {\n        downstream.onTagStart(tag)\n        path.add(tag.tagName)\n\n        println(\"[$id]  open ${tag.tagName} path: ${path.joinToString(\" > \")}\")\n    }\n\n    override fun onTagEnd(tag: Tag) {\n        downstream.onTagEnd(tag)\n        path.removeAt(path.lastIndex)\n\n        println(\"[$id] close ${tag.tagName} path: ${path.joinToString(\" > \")}\")\n    }\n\n    override fun onTagAttributeChange(tag: Tag, attribute: String, value: String?) {\n        downstream.onTagAttributeChange(tag, attribute, value)\n\n        println(\"[$id]     ${tag.tagName}.$attribute changed to $value\")\n    }\n\n    override fun onTagError(tag: Tag, exception: Throwable) {\n        println(\"[$id] exception in ${tag.tagName}: ${exception.message}\")\n\n        downstream.onTagError(tag, exception)\n    }\n\n    override fun finalize(): R {\n        val v = downstream.finalize()\n\n        println(\"[$id] finalized: ${v.toString()}\")\n\n        return v\n    }\n}\n\nfun <R> TagConsumer<R>.trace(println: (String) -> Unit) : TagConsumer<R> = TraceConsumer(this, println)\n//header fun <R> TagConsumer<R>.trace() : TagConsumer<R>\n","package kotlinx.html\n\nfun HEAD.styleLink(url : String) : Unit = link {\n    rel = LinkRel.stylesheet\n    type = LinkType.textCss\n\n    href = url\n}\n\nval Tag.br : Unit\n    get() {\n        val tag = BR(emptyMap(), consumer)\n        consumer.onTagStart(tag)\n        consumer.onTagEnd(tag)\n    }\n\nexpect fun currentTimeMillis(): Long\n","package kotlinx.html\n\nimport kotlinx.html.*\nimport kotlinx.html.attributes.*\n\n/*******************************************************************************\n    DO NOT EDIT\n    This file was generated by module generate\n*******************************************************************************/\n\ninternal val attributeStringString : Attribute<String> = StringAttribute()\n\ninternal val attributeSetStringStringSet : Attribute<Set<String>> = StringSetAttribute()\n\ninternal val attributeBooleanBoolean : Attribute<Boolean> = BooleanAttribute()\n\ninternal val attributeBooleanBooleanOnOff : Attribute<Boolean> = BooleanAttribute(\"on\", \"off\")\n\ninternal val attributeBooleanTicker : Attribute<Boolean> = TickerAttribute()\n\ninternal val attributeButtonFormEncTypeEnumButtonFormEncTypeValues : Attribute<ButtonFormEncType> = EnumAttribute(buttonFormEncTypeValues)\n\ninternal val attributeButtonFormMethodEnumButtonFormMethodValues : Attribute<ButtonFormMethod> = EnumAttribute(buttonFormMethodValues)\n\ninternal val attributeButtonTypeEnumButtonTypeValues : Attribute<ButtonType> = EnumAttribute(buttonTypeValues)\n\ninternal val attributeCommandTypeEnumCommandTypeValues : Attribute<CommandType> = EnumAttribute(commandTypeValues)\n\ninternal val attributeDirEnumDirValues : Attribute<Dir> = EnumAttribute(dirValues)\n\ninternal val attributeDraggableEnumDraggableValues : Attribute<Draggable> = EnumAttribute(draggableValues)\n\ninternal val attributeFormEncTypeEnumFormEncTypeValues : Attribute<FormEncType> = EnumAttribute(formEncTypeValues)\n\ninternal val attributeFormMethodEnumFormMethodValues : Attribute<FormMethod> = EnumAttribute(formMethodValues)\n\ninternal val attributeIframeSandboxEnumIframeSandboxValues : Attribute<IframeSandbox> = EnumAttribute(iframeSandboxValues)\n\ninternal val attributeInputFormEncTypeEnumInputFormEncTypeValues : Attribute<InputFormEncType> = EnumAttribute(inputFormEncTypeValues)\n\ninternal val attributeInputFormMethodEnumInputFormMethodValues : Attribute<InputFormMethod> = EnumAttribute(inputFormMethodValues)\n\ninternal val attributeInputTypeEnumInputTypeValues : Attribute<InputType> = EnumAttribute(inputTypeValues)\n\ninternal val attributeKeyGenKeyTypeEnumKeyGenKeyTypeValues : Attribute<KeyGenKeyType> = EnumAttribute(keyGenKeyTypeValues)\n\ninternal val attributeRunAtEnumRunAtValues : Attribute<RunAt> = EnumAttribute(runAtValues)\n\ninternal val attributeTextAreaWrapEnumTextAreaWrapValues : Attribute<TextAreaWrap> = EnumAttribute(textAreaWrapValues)\n\ninternal val attributeThScopeEnumThScopeValues : Attribute<ThScope> = EnumAttribute(thScopeValues)\n\n","@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.comparisons.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAt(index: Int): Byte {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAt(index: Int): Short {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAt(index: Int): Int {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAt(index: Int): Long {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAt(index: Int): Float {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAt(index: Int): Double {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAt(index: Int): Boolean {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n .. size - 1)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\n@Suppress(\"UNUSED_PARAMETER\")\npublic infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    for (index in indices)\n        result[index] = this[index]\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Collections.Transformations.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) count++\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T: S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T: S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from elements of both collections with same indexes using provided [transform]. List has length of shortest collection.\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0..size-1) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        count += 1\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char = this@asList[index]\n        override fun indexOf(element: Char): Int = this@asList.indexOf(element)\n        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)\n    }\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n */\npublic fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ByteArray.copyOf(newSize: Int): ByteArray {\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun ShortArray.copyOf(newSize: Int): ShortArray {\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun IntArray.copyOf(newSize: Int): IntArray {\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun LongArray.copyOf(newSize: Int): LongArray {\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun FloatArray.copyOf(newSize: Int): FloatArray {\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun CharArray.copyOf(newSize: Int): CharArray {\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n */\npublic fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns new array which is a copy of range of original array.\n */\npublic fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic fun LongArray.sort(): Unit {\n    if (size > 1)\n        sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n */\npublic fun <T: Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1)\n        sort { a: T, b: T -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n */\npublic fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1)\n        sort { a, b -> comparator.compare(a, b) }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun LongArray.toTypedArray(): Array<Long> {\n    return copyOf().unsafeCast<Array<Long>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return copyOf().unsafeCast<Array<Boolean>>()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic fun CharArray.toTypedArray(): Array<Char> {\n    return Array<Char>(size, { i -> this[i] })\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sort(noinline comparison: (a: T, b: T) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n"],"names":[],"mappings":"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mD;IACA,+C;IACA,+C;IACA,+C;IACA,iD;IACA,+C;IACA,qD;IACA,iD;IACA,iD;IACA,mD;IACA,mD;IACA,iD;IACA,qD;IACA,mD;IACA,iD;IACA,iD;IACA,mD;IACA,qD;IACA,qD;IACA,qD;IACA,qD;IACA,qD;IACA,qD;IACA,mD;IACA,qD;IACA,iD;IACA,mD;IACA,mD;IACA,qD;IACA,qD;IACA,qD;IACA,mD;IACA,iD;IACA,qD;IACA,qD;IACA,mD;IACA,iD;IACA,+C;IACA,qD;IACA,qD;IACA,qD;IACA,mD;IACA,qD;IACA,iD;IACA,mD;IACA,qD;IACA,qD;IACA,qD;IACA,mD;IACA,iD;IACA,qD;IACA,mD;IACA,mD;IACA,qD;IACA,qD;IACA,mD;IACA,qD;IACA,iD;IACA,mD;IACA,mD;IACA,qD;IACA,qD;IACA,qD;IACA,mD;IACA,iD;IACA,qD;IACA,qD;IACA,mD;IACA,iD;IACA,+C;IACA,qD;IACA,qD;IACA,qD;IACA,mD;IACA,qD;IACA,iD;IACA,qD;IACA,qD;IACA,qD;IACA,qD;IACA,mD;IACA,iD;IACA,qD;IACA,mD;IACA,kD;EA1GL,C;;;IAMI,qB;IAAA,6B;EAAA,C;;;IACC,qB;IAAA,2B;EAAA,C;;;IACA,qB;IAAA,2B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,4B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;IACA,qB;IAAA,+B;EAAA,C;;;IACA,qB;IAAA,8B;EAAA,C;;;IACA,qB;IAAA,6B;EAAA,C;;;MAGQ,aAAM,IAAK,WAAX,GAAwB,G;IAAxB,C;;;;;;;;IA7Gb,s9F;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,kC;MAAA,U;QAAA,gC;MAAA,U;QAAA,gC;MAAA,Y;QAAA,kC;MAAA,W;QAAA,iC;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,W;QAAA,iC;MAAA,c;QAAA,oC;MAAA,Y;QAAA,kC;MAAA,W;QAAA,iC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,W;QAAA,iC;MAAA,W;QAAA,iC;MAAA,W;QAAA,iC;MAAA,Y;QAAA,kC;MAAA,W;QAAA,iC;MAAA,c;QAAA,oC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,W;QAAA,iC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,Y;QAAA,kC;MAAA,a;QAAA,mC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,W;QAAA,iC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,c;QAAA,oC;MAAA,Y;QAAA,kC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,c;QAAA,oC;MAAA,a;QAAA,mC;MAAA,Y;QAAA,kC;MAAA,Q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"}