{"version":3,"file":"Kotlin MultiPlatform Presentation.js","sources":["../../../../src/main/kotlin/main.kt","collections/Maps.kt"],"sourcesContent":["import com.github.salomonbrys.revealkt.*\nimport kotlinx.html.*\nimport kotlinx.html.dom.append\nimport kotlinx.html.js.*\nimport kotlin.browser.document\n\n\nfun main(args: Array<String>) {\n\n    document.body!!.append {\n        revealSlides {\n            div {\n                id = \"logoBottom\"\n                img(src = \"imgs/logo-white.svg\")\n                p { b { +\"KODEIN\" } ; +\"Koders\" }\n            }\n\n            section {\n                slide {\n                    h2 { +\"Kotlin for Android, iOS & the mobile web,\" }\n                    img(src = \"imgs/Avatar.jpg\") {\n                        style = \"width: 15%; border-radius: 100%; box-shadow: 3px 3px 20px #555;\"\n                    }\n                    br()\n                    +\"Salomon BRYS\"\n                    br()\n                    a(href = \"https://twitter.com/salomonbrys\") { +\"@salomonbrys\" }\n                }\n\n                slide {\n                    img(src = \"imgs/logo-white.svg\", classes = \"plain\") {\n                        style = \"height: 42%; margin-bottom: 1em;\"\n                    }\n                    br()\n                    a(href = \"https://kodein.net\") { +\"kodein.net\" }\n                    +\" / \"\n                    a(href = \"https://kodein.org\") { +\"kodein.org\" }\n                    br()\n                    a(href = \"https://twitter.com/kodeinkoders\") { +\"@KodeinKoders\" }\n                }\n            }\n\n            section {\n                slide {\n                    h2 { +\"Kotlin rocks!\" }\n                }\n                slide {\n                    h2 { +\"Did you know?\" }\n                    p { +\"Kotlin was NOT made for Android!\" }\n                }\n                slide {\n                    h4 { +\"Mars 2017:\" }\n                    fragment().img(src = \"imgs/kotlin-11.png\") { style = \"width: 10em;\" }\n                    br() ; br()\n                    fragment().h4 { +\"May 2017:\" }\n                    fragment().img(src = \"imgs/kotlin-android.jpg\") { style = \"width: 10em;\" }\n                }\n                slide {\n                    img(src = \"imgs/kotlin-everywhere.jpg\")\n                    fragment().img(src = \"imgs/apple.png\", classes = \"plain\") { id = \"apple\" }\n                }\n            }\n\n            section {\n                slide {\n                    h2 { +\"Why Android?\" }\n                    fragment().h1 { +\"Duh!\" }\n                }\n                slide {\n                    h2 { +\"Why iOS?\" }\n                    fragment().h1 { +\"Duh!\" }\n                }\n                slide {\n                    h2 { +\"Why Mobile Web / PWA?\" }\n                    fragment().img(src = \"imgs/north-south.png\")\n                }\n            }\n\n            section {\n                slide {\n                    h2 { +\"Code Architecture\" }\n                    ul {\n                        style = \"width: 100%;\"\n                        fragment(index = 1).li { +\"IoC: Kodein-DI\" }\n                        fragment(index = 2).li {\n                            +\"View Separation: \"\n                            fragment(index = 7).span(classes = \"fade-in-appear\") { +\"ad-hoc MVP\" }\n                            fragment(index = 7).span(classes = \"fade-out-disappear\") {\n                                fragment(index = 6).span(classes = \"fade-in-appear\") { i { +\"(Kodein-MVP in the work)\" } }\n                            }\n                            fragment(index = 6).span(classes = \"fade-out-disappear\") {\n                                fragment(index = 5).span(classes = \"fade-in-appear\") { +\"MVP\" }\n                            }\n                            fragment(index = 5).span(classes = \"fade-out-disappear\") {\n                                fragment(index = 4).span(classes = \"fade-in-appear\") { +\"Manageable inVulnerable Partition\" }\n                            }\n                            fragment(index = 4).span(classes = \"fade-out-disappear\") {\n                                fragment(index = 3).span(classes = \"fade-in-appear\") { +\"Most Verbose Pattern\" }\n                            }\n                            fragment(index = 3).span(classes = \"fade-out-disappear\") { +\"MVP\" }\n\n                        }\n                        fragment(index = 8).li { +\"Common \" ; b { +\"business code\" } }\n                        fragment(index = 9).li {\n                            +\"Specific \" ; b { +\"UI code\" }\n                            ul {\n                                fragment(index = 10).li {\n                                    +\"Android: native view system \"\n                                    fragment(index = 13).i(classes = \"fade-in-appear\") { +\"in Kotlin!\" }\n                                }\n                                fragment(index = 11).li {\n                                    +\"iOS: native view system \"\n                                    fragment(index = 14).i(classes = \"fade-in-appear\") { +\"in Swift :(\" }\n                                    fragment(index = 14).span(classes = \"fade-out-disappear\") {\n                                        fragment(index = 13).i(classes = \"fade-in-appear\") { +\"in Kotlin!\" }\n                                    }\n                                }\n                                fragment(index = 12).li {\n                                    +\"Web: React \"\n                                    fragment(index = 13).i(classes = \"fade-in-appear\") { +\"in Kotlin!\" }\n                                }\n                            }\n                        }\n                    }\n                }\n                slide {\n                    h2 { +\"Build Architecture\" }\n                    div {\n                        style = \"position:relative; height: 510px; margin:0 auto;\"\n\n                        val imgStyle = \"position: absolute; margin: auto; top: 0; left: 0; right: 0;\"\n\n                        img(src = \"imgs/kmp-arch-0.png\") { style = imgStyle }\n                        fragment().img(src = \"imgs/kmp-arch-1.png\") { style = imgStyle }\n                        fragment().img(src = \"imgs/kmp-arch-2.png\") { style = imgStyle }\n                        fragment().img(src = \"imgs/kmp-arch-3.png\") { style = imgStyle }\n                        fragment().img(src = \"imgs/kmp-arch-4.png\") { style = imgStyle }\n                    }\n                }\n            }\n            section {\n                slide {\n                    p { +\"Show me some code alright!\" }\n                    img(src = \"imgs/impatient.gif\") { style = \"width: 60%;\" }\n                }\n                slide {\n                    p { +\"OK, OK, let's\" }\n                    h1 { +\"CODE!\" }\n                }\n            }\n            section {\n                slide {\n                    h3 {\n                        +\"The \"\n                        fragment(index = 1).span(classes = \"fade-in-appear\") { +\"Kotlin/Native\" }\n                        fragment(index = 1).span(classes = \"fade-out-disappear\") { +\"Erroneous\" }\n                        br()\n                        +\" concurrency Model\"\n                    }\n                    br()\n                    p {\n                        +\"A datum can \"\n                        fragment(index = 1).b(classes = \"fade-in-appear\") { unsafe { +\"either&nbsp;\" } }\n                        +\"be \"\n                        b { +\"shared \" }\n                        fragment(index = 1).span(classes = \"fade-in-appear\") { unsafe { +\"or&nbsp;\" } }\n                        fragment(index = 1).span(classes = \"fade-out-disappear\") { unsafe { +\"and&nbsp;\" } }\n                        b { +\"mutable \" }\n                        +\"!\"\n                        br() ; br()\n                        p { +\" \" }\n                    }\n                }\n                slide {\n                    h3 {\n                        +\"The Kotlin/Native\"\n                        br()\n                        +\"concurrency Model\"\n                    }\n                    ul {\n                        style = \"width: 40%;\"\n                        fragment().li { +\"Freezing\" }\n                        fragment().li { +\"Ownership\" }\n                        fragment().li { +\"Ownership transfer\" }\n                    }\n                }\n                slide {\n                    img(src = \"imgs/nikolay.jpg\") {\n                        style = \"width: 60%\"\n                    }\n                }\n            }\n\n            section {\n                attributes[\"data-background-color\"] = \"#46AF6D\"\n                attributes[\"data-background-image\"] = \"imgs/header-background.svg\"\n\n                slide {\n                    div(classes = \"logo\") {\n                        img(classes = \"logo-img plain\", src = \"imgs/logo-white.svg\")\n                        div {\n                            h1 {\n                                b { +\"KODEIN\" }\n                                +\"Framework\"\n                            }\n                            h2 {\n                                +\"painless \"\n                                img(classes = \"plain\", src = \"imgs/kotlin-white.svg\")\n                                +\" kotlin\"\n                            }\n                        }\n                    }\n                }\n\n                slide {\n                    attributes[\"data-background-iframe\"] = \"https://kodein.org/\"\n                }\n            }\n\n            section {\n                slide {\n                    h1 { +\"Should you?\" }\n                }\n                slide {\n                    h2 { +\"What's there\" }\n                    ul {\n                        style = \"width: 40%;\"\n                        li { +\"KotlinX Coroutines\" }\n                        li { +\"KotlinX Serialization\" }\n                        li { +\"KotlinX I/O\" }\n                        li { +\"KotlinX AtomicFU\" }\n                        li { +\"Ktor Clients\" }\n                        li { +\"Kodein DI\" }\n                    }\n                }\n                slide {\n                    h2 { +\"What's comming\" }\n                    ul {\n                        style = \"width: 40%;\"\n                        li { +\"KotlinX Files\" }\n                        li { +\"Kodein DB\" }\n                        li { +\"Kodein MVP\" }\n                        li { +\"Kodein Report\" }\n                        fragment().li { +\"???\" }\n                    }\n                }\n                slide {\n                    h2 { +\"Should you?\" }\n                    img(src = \"imgs/yes.gif\")\n                }\n            }\n\n            section {\n                slide {\n                    p { +\"Let\" }\n                    div(classes = \"logo\") {\n                        img(classes = \"logo-img plain\", src = \"imgs/logo-white.svg\")\n                        div {\n                            h1 {\n                                b { +\"KODEIN\" }\n                                +\"Koders\"\n                            }\n                            h2 {\n                                +\"painless technology\"\n                            }\n                        }\n                    }\n                    p { +\"answer your questions!\" }\n                    br()\n                    br()\n                    a(href = \"https://kodein.net\") { +\"kodein.net\" }\n                    +\" / \"\n                    a(href = \"https://kodein.org\") { +\"kodein.org\" }\n                    br()\n                    a(href = \"https://twitter.com/kodeinkoders\") { +\"@KodeinKoders\" }\n                }\n            }\n        }\n    }\n\n    val revealRoot = \"kjs/webjars/reveal.js/3.5.0\"\n\n\n    Reveal.initialize {\n        slideNumber = true\n        history = true\n        dependencies = arrayOf(\n                RevealPlugins.speakerNotes(revealRoot),\n                RevealPlugins.highlightJs(revealRoot)\n        )\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n"],"names":[],"mappings":"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"}